.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLCC 1"
.TH PERLCC 1 "2018-06-12" "perl v5.22.5" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlcc \- generate executables from Perl programs
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    perlcc hello.pl            # Compiles into executable \*(Aqa.out\*(Aq
\&    perlcc \-o hello hello.pl   # Compiles into executable \*(Aqhello\*(Aq
\&
\&    perlcc \-O file.pl          # Compiles using the optimised CC backend
\&    perlcc \-O3 file.pl         # Compiles with C, using \-O3 optimizations
\&    perlcc \-B file.pl          # Compiles using the bytecode backend
\&    perlcc \-B \-m file.pm       # Compiles a module to file.pmc
\&
\&    perlcc \-c file.pl          # Creates a C file, \*(Aqfile.c\*(Aq
\&    perlcc \-S \-o hello file.pl # Keep C file
\&    perlcc \-c out.c file.pl    # Creates a C file, \*(Aqout.c\*(Aq from \*(Aqfile\*(Aq
\&    perlcc \-\-staticxs \-r \-o hello hello.pl # Compiles,links and runs with
\&                               # XS modules static/dynaloaded
\&
\&    perlcc \-e \*(Aqprint q//\*(Aq      # Compiles a one\-liner into \*(Aqa.out\*(Aq
\&    perlcc \-c \-e \*(Aqprint q//\*(Aq   # Creates a C file \*(Aqa.out.c\*(Aq
\&
\&    perlcc \-I /foo hello       # extra headers for C
\&    perlcc \-L /foo hello       # extra libraries for C
\&    perlcc \-\-Wb=\-Dsp           # extra perl compiler options
\&    perlcc \-fno\-delete\-pkg     # extra perl compiler options
\&    perlcc \-\-Wc=\-fno\-openmp    # extra C compiler options
\&    perlcc \-\-Wl=\-s             # extra C linker options
\&
\&    perlcc \-uIO::Socket        # force saving IO::Socket
\&    perlcc \-UB                 # "unuse" B, compile without any B symbols
\&
\&    perlcc \-r hello            # compiles \*(Aqhello\*(Aq into \*(Aqa.out\*(Aq, runs \*(Aqa.out\*(Aq
\&    perlcc \-r hello a b c      # compiles \*(Aqhello\*(Aq into \*(Aqa.out\*(Aq, runs \*(Aqa.out\*(Aq
\&                               # with arguments \*(Aqa b c\*(Aq
\&
\&    perlcc hello \-log c.log    # compiles \*(Aqhello\*(Aq into \*(Aqa.out\*(Aq, log into \*(Aqc.log\*(Aq
\&
\&    perlcc \-h                  # help, only SYNOPSIS
\&    perlcc \-v2 \-h              # verbose help, also DESCRIPTION and OPTIONS
\&    perlcc \-\-version           # prints internal perlcc and the B\-C release version
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIperlcc\fR creates standalone executables from Perl programs, using the
code generators provided by the B module. At present, you may
either create executable Perl bytecode, using the \f(CW\*(C`\-B\*(C'\fR option, or
generate and compile C files using the standard and 'optimised' C
backends.
.PP
The code generated in this way is not guaranteed to work. The whole
codegen suite (\f(CW\*(C`perlcc\*(C'\fR included) should be considered \fBvery\fR
experimental. Use for production purposes is strongly discouraged.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-L\fIC library directories\fR" 4
.IX Item "-LC library directories"
Adds the given directories to the library search path when C code is
passed to your C compiler.
For multiple paths use multiple \-L options.
.IP "\-I\fIC include directories\fR" 4
.IX Item "-IC include directories"
Adds the given directories to the include file search path when C code is
passed to your C compiler; when using the Perl bytecode option, adds the
given directories to Perl's include path.
For multiple paths use multiple \-I options.
.IP "\-o \fIoutput file name\fR" 4
.IX Item "-o output file name"
Specifies the file name for the final compiled executable.
.Sp
Without given output file name we use the base of the input file,
or with \f(CW\*(C`\-e\*(C'\fR \fIa.out\fR resp. \fIa.exe\fR and a randomized intermediate
C filename.
If the input file is an absolute path on a non-windows system use
the basename.
.IP "\-c \fIC file name\fR" 4
.IX Item "-c C file name"
Create C file only; do not compile and link to a standalone binary.
.IP "\-e \fIperl code\fR" 4
.IX Item "-e perl code"
Compile a one-liner, much the same as \f(CW\*(C`perl \-e \*(Aq...\*(Aq\*(C'\fR
.IP "\-\-check" 4
.IX Item "--check"
Pass \-c flag to the backend, prints all backend warnings to \s-1STDOUT\s0
and exits before generating and compiling code. Similar to perl \-c.
.IP "\-S" 4
.IX Item "-S"
\&\*(L"Keep source\*(R".
Do not delete generated C code after compilation.
.IP "\-B" 4
.IX Item "-B"
Use the Perl bytecode code generator.
.IP "\-\-debug or \-D" 4
.IX Item "--debug or -D"
Shortcut for \-\-Wb=\-Dfull \-S
to enable all debug levels and also preserve source code,
also view \-\-Wb to enable some specific debugging options.
.IP "\-O" 4
.IX Item "-O"
Use the 'optimised' C code generator B::CC. This is more experimental than
everything else put together, and the code created is not guaranteed to
compile in finite time and memory, or indeed, at all.
.IP "\-O\fI1\-4\fR" 4
.IX Item "-O1-4"
Pass the numeric optimisation option to the compiler backend.
Shortcut for \f(CW\*(C`\-Wb=\-On\*(C'\fR.
.Sp
This does not enforce B::CC.
.IP "\-v \fI0\-6\fR" 4
.IX Item "-v 0-6"
Set verbosity of output from 0 to max. 6.
.IP "\-r" 4
.IX Item "-r"
Run the resulting compiled script after compiling it.
.IP "\-\-log \fIlogfile\fR" 4
.IX Item "--log logfile"
Log the output of compiling to a file rather than to stdout.
.IP "\-f<option> or \-\-f=<option>" 4
.IX Item "-f<option> or --f=<option>"
Pass the options to the compiler backend, such as
\&\f(CW\*(C`\-fstash\*(C'\fR or \f(CW\*(C`\-fno\-delete\-pkg\*(C'\fR.
.IP "\-\-Wb=\fIoptions\fR" 4
.IX Item "--Wb=options"
Pass the options to the compiler backend, such as \f(CW\*(C`\-\-Wb=\-O2,\-v\*(C'\fR
.IP "\-\-Wc=\fIoptions\fR" 4
.IX Item "--Wc=options"
Pass comma-seperated options to cc.
.IP "\-\-Wl=\fIoptions\fR" 4
.IX Item "--Wl=options"
Pass comma-seperated options to ld.
.IP "\-T or \-t" 4
.IX Item "-T or -t"
run the backend using perl \-T or \-t
.IP "\-A" 4
.IX Item "-A"
Allow perl options to be passed to the executable first,
like \-D...
.Sp
Adds \f(CW\*(C`\-DALLOW_PERL_OPTIONS\*(C'\fR which omits \f(CW\*(C`\-\-\*(C'\fR from being added
to the options handler.
.IP "\-u package" 4
.IX Item "-u package"
Add package(s) to compiler and force linking to it.
.IP "\-U package" 4
.IX Item "-U package"
Skip package(s). Do not compile and link the package and its sole dependencies.
.IP "\-\-stash" 4
.IX Item "--stash"
Detect external packages automatically via B::Stash
.IP "\-\-static" 4
.IX Item "--static"
Link to static libperl.a
.IP "\-\-staticxs" 4
.IX Item "--staticxs"
Link to static \s-1XS\s0 if available.
If the \s-1XS\s0 libs are only available as shared libs link to those (\*(L"prelink\*(R").
.Sp
Systems without rpath (windows, cygwin) must be extend \s-1LD_LIBRARY_PATH/PATH\s0 at run-time.
Together with \-static, purely static modules and no run-time eval or
require this will gain no external dependencies.
.IP "\-\-shared" 4
.IX Item "--shared"
Link to shared libperl
.IP "\-\-sharedxs" 4
.IX Item "--sharedxs"
Link shared XSUBs if the linker supports it. No DynaLoader needed.
This will still require the shared \s-1XSUB\s0 libraries to be installed
at the client, modification of \f(CW@INC\fR in the source is probably required.
(Not yet implemented)
.IP "\-m|\-\-sharedlib [Modulename]" 4
.IX Item "-m|--sharedlib [Modulename]"
Create a module, resp. a shared library.
Currently only enabled for Bytecode and \s-1CC.\s0 \fI(not yet tested)\fR
.IP "\-\-testsuite" 4
.IX Item "--testsuite"
Tries be nice to Test:: modules, like preallocating the file
handles 4 and 5, and munge the output of \s-1BEGIN.\s0
.Sp
.Vb 1
\&  perlcc \-r \-\-testsuite t/harness
.Ve
.IP "\-\-time" 4
.IX Item "--time"
Benchmark the different phases \fBc\fR \fI(B::* compilation)\fR,
\&\fBcc\fR \fI(cc compile + link)\fR, and \fBr\fR (runtime).
.IP "\-\-no\-spawn" 4
.IX Item "--no-spawn"
Do not spawn subprocesses for compilation, because broken
shells might not be able to kill its children.
