.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5221CDELTA 1"
.TH PERL5221CDELTA 1 "2018-01-01" "perl v5.22.5" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5221cdelta \- what is new for cperl v5.22.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes perl-only differences between the perl 5.22.0
release and the cperl 5.22.1 release.
.PP
For \fBcperl\fR see \fIChanges\fR and perlcperl
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.IP "\(bu" 4
coretypes (Int, UInt, Num, Str. lowercase native types accepted)
.Sp
See perltypes
.IP "\(bu" 4
types in signatures as designed and also as attribute
.Sp
But still using the slow Zefram signatures, which are 2x slower,
not faster.
.IP "\(bu" 4
function return types declarations as attribute
.Sp
Every function declaration can now carry it's return type as
attribute.  Note that types in user-defined functions are not yet
checked or optimized, only in the internal ops.
.Sp
.Vb 1
\&    sub myfunc(Int $a):Int { $a + 1 }
.Ve
.Sp
guarantees that the result will not overflow to Num.
.IP "\(bu" 4
new :pure function attributes
.Sp
to mark purely functional, side-effect free functions as such.  These
functions can be optimized easier later-on, e.g. with inlining or
memoization.
.IP "\(bu" 4
shaped arrays with compile-time checks and optims
.Sp
Parse a size argument for arrays, like
.Sp
.Vb 1
\&    my @a[20]; my Int @b[5];
.Ve
.Sp
and pre-initialize them with the zero-value of the type, undef if
untyped. This size may not be changed later.  Forbid and compile-time
and run-time check forbidden size changes, like push, pop, shift,
unshift on them. Enable faster accessor, which donot have to check the
index if out of bounds.  Native types int, uint, num, str are parsed
but not yet used as array elements. Multidimensional shaped arrays are not
supported nor optimized.
.IP "\(bu" 4
static loop optims
.Sp
Optimize loops with static arylen to use the new unchecked array element
accessors.
.Sp
.Vb 1
\&    for (0..$#a) { $a[$_] }
.Ve
.IP "\(bu" 4
fast arithmetic overflow
.Sp
With gcc\-5 or clang\-3.4 on 64bit new fast compiler intrinsics are used
for the add and multiply ops, which check just for the overflow flag
and then jump to the promotion to double. This results in smaller and
much faster code. The old code which had to compute the results twice,
and needed many more branches before to check for \s-1IV\s0 to \s-1UV\s0 or \s-1NV\s0
promotion.
.IP "\(bu" 4
convert static method to subs
.Sp
Convert static method calls to subs, as described in
<http://blogs.perl.org/users/rurban/2011/06/how\-perl\-calls\-subs\-and\-methods.html>
.Sp
Only 4% faster.
.IP "\(bu" 4
strict, attributes, DynaLoader, XSLoader as builtin packages, rewritten in C
.IP "\(bu" 4
changed default hash function to the fastest \s-1FNV1A\s0
.Sp
As in the stableperl fork. See <https://github.com/rurban/smhasher#smhasher> and
<https://github.com/rurban/perl\-hash\-stats#perl\-hash\-stats>
.Sp
Added more hash functions to test them: \s-1FNV1A,
FNV1A_YOSHIMITSUTRIAD/FNV1A_YT, CRC32, METRO64CRC, METRO64, SPOOKY32\s0
In the end the statistically slightly worse and slower \s-1FNV1A\s0 was the fastest
when used in a hash table function. For file or database digests other hash
functions are better.
.Sp
Allow Configure \-Dhash_func=name
.IP "\(bu" 4
new enterxsssub \s-1OP\s0
.Sp
Seperate \s-1XS\s0 and \s-1PP XS\s0 calls dynamically with a new enterxssub op.
12.5% faster, even when lot of \s-1XS\s0 loaded functions initially start as \s-1PP\s0 op,
and are restarted as \s-1XS\s0 op.
.IP "\(bu" 4
\&\-DI and \-Dk
.Sp
DEBUG_k: \-Dk for compiler checks and optimizations, also \-Dkv.
.Sp
\&\s-1DEBUG_I:\s0 \-DI replaces now \s-1PERLIO_DEBUG.\s0
.Sp
\&\s-1DEBUG_H:\s0 \-DH is now extended to report more.
.IP "\(bu" 4
add some unicode ops
.Sp
With utf8 and use 5.22 or \-E some new unicode ops are now understood:
.Sp
Parse constant unicode superscripts, grouped into max 2 digits:
.Sp
.Vb 3
\&    2XX  => 2**25
\&    2XXX => (2**02)**5
\&    $aX => $a ** 3
.Ve
.Sp
And
.Sp
.Vb 2
\&    X X
\&    X X X X X
.Ve
.Sp
as shorter to read and harder to write aliases for:
.Sp
.Vb 4
\&    ARROW \-> and FATARROW =>
\&    NCMP <=>
\&    NE,LE,GE !=,<=,>=
\&    DIVIDE /
.Ve
.IP "\(bu" 4
improved build system
.Sp
make \-s is now more silent, and thus much faster.
.Sp
\&\s-1CC\s0 is now used for compiling and \s-1LD\s0 for linking. This enables now
seperate linkers to be used, esp. gold linkers or \s-1LLVM\s0 optimizations.
.IP "\(bu" 4
extended dump and Devel::Peek
.Sp
All \s-1SV FLAGS\s0 are now seperated into the general sv_flags and type specific
cv,hv,av flags, and printed as hex value and as string interpretation.
PADs are printed now with more information.
.SS "Unicode 8.0 is now supported"
.IX Subsection "Unicode 8.0 is now supported"
For details on what is in this release, see
<http://www.unicode.org/versions/Unicode8.0.0/>.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "exceptions for i_modulo and i_divide with constants"
.IX Subsection "exceptions for i_modulo and i_divide with constants"
Re-instate pre\-2002 exceptions for i_modulo and i_divide with constants
and typed integers, as with use integer.
.PP
[\s-1CHANGE\s0] constant integer modulo now behaves as under use integer
and deviates with one negative argument from post\-2002 code.
.SS "integer constants behave now as under use integer"
.IX Subsection "integer constants behave now as under use integer"
Provide upgrade exceptions with the u_ suffix for u_add and u_multiply
to allow promotion from signed integers to unsigned.  But results of
arithmetic operations with only integer constants are not promoted to
double numbers anymore.
.ie n .SS "The ""/\eC/"" character class has been removed."
.el .SS "The \f(CW/\eC/\fP character class has been removed."
.IX Subsection "The /C/ character class has been removed."
This regular expression character class was deprecated in v5.20.0 and has
produced a deprecation warning since v5.22.0. It is now a compile-time
error. If you need to examine the individual bytes that make up a
UTF8\-encoded character, then use \f(CW\*(C`utf8::encode()\*(C'\fR on the string (or a
copy) first.
.ie n .SS """chdir(\*(Aq\*(Aq)"" no longer chdirs home"
.el .SS "\f(CWchdir(\*(Aq\*(Aq)\fP no longer chdirs home"
.IX Subsection "chdir() no longer chdirs home"
Using \f(CW\*(C`chdir(\*(Aq\*(Aq)\*(C'\fR or \f(CW\*(C`chdir(undef)\*(C'\fR to chdir home has been deprecated since
perl v5.8, and will now fail.  Use \f(CW\*(C`chdir()\*(C'\fR instead.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
strict, attributes, DynaLoader, XSLoader as builtin packages
.Sp
Those packages are now builtins, and were rewritten in C for performance
and memory reasons.
.IP "\(bu" 4
Config as \s-1XS\s0
.Sp
Config is now a \s-1XS\s0 extension, implemented as perfect hash leading to
dramatic memory savings. See <http://perl11.org/cperl/STATUS.html>
.IP "\(bu" 4
Safe
.Sp
Safe was improved to skip loading empty Carp::Heavy, and to add many
missing tests.
.IP "\(bu" 4
The libnet distribution has been upgraded from version 3.05 to 3.06.
.IP "\(bu" 4
The Scalar-List-Utils distribution has been upgraded from version 1.41 to 1.42.
.IP "\(bu" 4
autodie has been upgraded from version 2.26 to 2.27.
.IP "\(bu" 4
CPAN::Meta has been upgraded from version 2.150001 to 2.150005.
.IP "\(bu" 4
CPAN::Meta::Requirements has been upgraded from version 2.132 to 2.133.
.IP "\(bu" 4
CPAN::Meta::YAML has been upgraded from version 0.012 to 0.016.
.IP "\(bu" 4
Encode has been upgraded from version 2.72 to 2.73.
.IP "\(bu" 4
encoding has been upgraded from version 2.14 to 2.15.
.IP "\(bu" 4
ExtUtils::CBuilder has been upgraded from version 0.280221 to 0.280223.
.IP "\(bu" 4
feature has been upgraded from version 1.40 to 1.41.
.IP "\(bu" 4
Getopt::Long has been upgraded from version 2.45 to 2.46.
.IP "\(bu" 4
HTTP::Tiny has been upgraded from version 0.054 to 0.056.
.IP "\(bu" 4
List::Util has been upgraded from version 1.41 to 1.42_01.
.IP "\(bu" 4
Locale::Codes has been upgraded from version 3.34 to 3.35.
.IP "\(bu" 4
Math::BigInt has been upgraded from version 1.9997 to 1.999701.
.Sp
Correct the behaviour of \fIbdiv()\fR and \fIbmod()\fR in list context. [perl #124300]
.Sp
Correct \f(CW\*(C`Math::BigInt\->new()\*(C'\fR for non-integer input.  [perl #124325]
.Sp
Speed up Math::BigFloat \-> \fIblog()\fR. [perl #124382]
.Sp
Fix bug in Math::BigFloat's \fIbceil()\fR and \fIbint()\fR methods. [perl #124412]
.IP "\(bu" 4
Math::BigRat has been upgraded from version 0.2608 to 0.260801.
.Sp
Correct the behaviour of \fIbdiv()\fR and \fIbmod()\fR in list context. [perl #124303]
.IP "\(bu" 4
Module::CoreList has been upgraded from version 5.20150520 to 5.20150620.
.IP "\(bu" 4
Module::Metadata has been upgraded from version 1.000026 to 1.000027.
.IP "\(bu" 4
parent has been upgraded from version 0.232 to 0.234.
.IP "\(bu" 4
Parse::CPAN::Meta has been upgraded from version 1.4414 to 1.4417.
.IP "\(bu" 4
perl5db.pl has been upgraded from version 1.49 to 1.49_01.
.Sp
User actions are no longer evaluated after the script under the
debugger finishes.  [perl #71678]
.IP "\(bu" 4
Pod::Simple has been upgraded from version 3.29 to 3.30.
.IP "\(bu" 4
Pod::Usage has been upgraded from version 1.64 to 1.67.
.IP "\(bu" 4
\&\s-1POSIX\s0 has been upgraded from version 1.53 to 1.54.
.Sp
The NaN payload \s-1API\s0 has been implemented (getpayload, setpayload,
setpayloadsig, issignaling).
.IP "\(bu" 4
Scalar::Util has been upgraded from version 1.41 to 1.42_01.
.IP "\(bu" 4
Socket has been upgraded from version 2.018 to 2.019.
.IP "\(bu" 4
threads has been upgraded from version 2.01 to 2.02.
.IP "\(bu" 4
Time::Piece has been upgraded from version 1.29 to 1.30.
.IP "\(bu" 4
\&\s-1UNIVERSAL\s0 has been upgraded from version 1.12 to 1.13.
.Sp
Don't import from \s-1UNIVERSAL\s0 in its documentation, it no longer
exports anything.  [perl #125410]
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "Win32" 4
.IX Item "Win32"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Visual \*(C+ 2013 builds will now execute on \s-1XP\s0 and higher. Previously they would
only execute on Vista and higher.
.IP "\(bu" 4
You can now build perl with \s-1GNU\s0 Make and \s-1GCC.\s0  [perl #123440]
.IP "\(bu" 4
\&\f(CW\*(C`truncate($filename, $size)\*(C'\fR now works for files over 4GB in size.
[perl #125347]
.RE
.RS 4
.RE
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
don't fatalize warnings during unwinding
.Sp
[perl #123398]
.IP "\(bu" 4
Ignore \s-1ENOTTY\s0 on open via the perlio buffer layer
.IP "\(bu" 4
hash keys keep the tainted info.
.Sp
See [perlsec](http://perldoc.perl.org/perlsec.html#Taint\-mode)
.IP "\(bu" 4
fix ops using lexical \f(CW$_\fR
.Sp
This was broken since 2002.
.Sp
Fixed the old \s-1OA_TARGLEX\s0 bug with \s-1TARGET_MY\s0 optimizations.
.Sp
Tracked down a wrong \s-1TARGET_MY\s0 optimization on the ucfirst op, where
is illegal to use, because the (PL_opargs[kid\->op_type] & \s-1OA_TARGLEX\s0
usage in maybe_targlex is wrong.
.Sp
This was testing for one of both bits \s-1TARGET 8 OR TARGLEX 16\s0 thus
always was true for each \s-1TARGET\s0 t op, like ucfirst, which are not
prepared to use \s-1TARGET_MY.\s0
.Sp
The bug was there from Ilya's first \s-1SASSIGN\s0 optimization patch on,
which added \s-1TARGLEX,\s0 but this was using the bit 256 in opargs, which
never caused the bitpattern to match. And where it matched the assert
was removed.
Added now a bittester macro \s-1OP_HAS_TARGLEX,\s0 because people notoriously
get bit matching with \s-1AND\s0 or \s-1OR\s0 wrong.
.IP "\(bu" 4
readonly packages can now be cloned with threads
.IP "\(bu" 4
fixed some crashing cornercases found by the \s-1AFL\s0 fuzzer or similar:
.Sp
[perl #125840]: \f(CW$x\fR=*0; *x=$x  protect from \s-1XSRETURN\s0(\-1)
.Sp
[perl #125341]: \s-1BEGIN\s0 <> (worse fix added upstream)
.Sp
[perl #125350]: qq{@{[0}*sub{]]}}}=sub{0' . \*(L"\ec[\*(R" (Shlomi Fish, not upstream)
.Sp
fixed various off-by-one \e0 errors with the new 5.16 \s-1GV\s0 code.
.IP "\(bu" 4
Duplicating a closed file handle for write no longer creates a
filename of the form \fI\s-1GLOB\s0(0xXXXXXXXX)\fR.  [perl #125115]
.IP "\(bu" 4
Warning fatality is now ignored when rewinding the stack.  This
prevents infinite recursion when the now fatal error also causes
rewinding of the stack.  [perl #123398]
.IP "\(bu" 4
In perl v5.22.0, the logic changed when parsing a numeric parameter to the \-C
option, such that the successfully parsed number was not saved as the option
value if it parsed to the end of the argument.  [perl #125381]
.IP "\(bu" 4
The PadlistNAMES macro is an lvalue again.
.IP "\(bu" 4
Zero \-DPERL_TRACE_OPS memory for sub-threads.
.Sp
\&\fIperl_clone_using()\fR was missing Zero init of PL_op_exec_cnt[].  This
caused sub-threads in threaded \-DPERL_TRACE_OPS builds to spew exceedingly
large op-counts at destruct.  These counts would print \f(CW%x\fR as \*(L"\s-1ABABABAB\*(R",\s0
clearly a mem-poison value.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.22.1c represents approximately 6 months of development since Perl 5.22.0
and contains approximately 86,000 lines of changes across 480 files from 29
authors.
.PP
Excluding auto-generated files, documentation and release tools, there were
approximately 55,000 lines of changes to 270 .pm, .t, .c and .h files.
.PP
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.22.1c:
.PP
Chase Whitener, Chris 'BinGOs' Williams, Craig A. Berry, Dagfinn Ilmari
Mannsa\*oker, Daniel Dragan, David Golden, David Mitchell, Hugo van der Sanden,
Jan Dubois, Jarkko Hietaniemi, Jerry D. Hedden, Jim Cromie, Karen Etheridge,
Karl Williamson, kmx, Lukas Mai, Martijn Lievaart, Matthew Horsfall, Niko Tyni,
Peter John Acklam, Rafael Garcia-Suarez, Reini Urban, Ricardo Signes, Shlomi
Fish, Steve Hay, Thomas Sibley, Tony Cook, Unicode Consortium, Zefram.
.PP
The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0 modules
included in Perl's core. We're grateful to the entire \s-1CPAN\s0 community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors, please see
the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \f(CW\*(C`perlbug\*(C'\fR program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of \f(CW\*(C`perl \-V\*(C'\fR,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5\-security\-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
\&\s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details on
what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
