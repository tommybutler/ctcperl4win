.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Mixin::Linewise::Writers 3"
.TH Mixin::Linewise::Writers 3 "2015-04-08" "perl v5.22.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mixin::Linewise::Writers \- get linewise writers for strings and filenames
.SH "VERSION"
.IX Header "VERSION"
version 0.108
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package Your::Pkg;
\&  use Mixin::Linewise::Writers \-writers;
\&
\&  sub write_handle {
\&    my ($self, $data, $handle) = @_;
\&
\&    $handle\->print("datum: $_\en") for @$data;
\&  }
.Ve
.PP
Then:
.PP
.Vb 1
\&  use Your::Pkg;
\&
\&  Your::Pkg\->write_file($data, $filename);
\&
\&  Your::Pkg\->write_string($data, $string);
\&
\&  Your::Pkg\->write_handle($data, $fh);
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
\&\f(CW\*(C`write_file\*(C'\fR and \f(CW\*(C`write_string\*(C'\fR are exported by default.  Either can be
requested individually, or renamed.  They are generated by
Sub::Exporter, so consult its documentation for more
information.
.PP
Both can be generated with the option \*(L"method\*(R" which requests that a method
other than \*(L"write_handle\*(R" is called with the created IO::Handle.
.PP
If given a \*(L"binmode\*(R" option, any \f(CW\*(C`write_file\*(C'\fR type functions will use
that as an \s-1IO\s0 layer, otherwise, the default is \f(CW\*(C`encoding(UTF\-8)\*(C'\fR.
.PP
.Vb 2
\&  use Mixin::Linewise::Writers \-writers => { binmode => "raw" };
\&  use Mixin::Linewise::Writers \-writers => { binmode => "encoding(iso\-8859\-1)" };
.Ve
.SS "write_file"
.IX Subsection "write_file"
.Vb 2
\&  Your::Pkg\->write_file($data, $filename);
\&  Your::Pkg\->write_file($data, $options, $filename);
.Ve
.PP
This method will try to open a new file with the given name.  It will then call
\&\f(CW\*(C`write_handle\*(C'\fR with that handle.
.PP
An optional hash reference may be passed before \f(CW$filename\fR with options.
The only valid option currently is \f(CW\*(C`binmode\*(C'\fR, which overrides any
default set from \f(CW\*(C`use\*(C'\fR or the built-in \f(CW\*(C`encoding(UTF\-8)\*(C'\fR.
.PP
Any arguments after \f(CW$filename\fR are passed along after to \f(CW\*(C`write_handle\*(C'\fR.
.SS "write_string"
.IX Subsection "write_string"
.Vb 2
\&  my $string = Your::Pkg\->write_string($data);
\&  my $string = Your::Pkg\->write_string(\e%option, $data);
.Ve
.PP
\&\f(CW\*(C`write_string\*(C'\fR will create a new handle on the given string, then call
\&\f(CW\*(C`write_handle\*(C'\fR to write to that handle, and return the resulting string.
Because handles on strings must be octet-oriented, the string \fBwill contain
octets\fR.  It will be opened in the default binmode established by importing.
(See \*(L"\s-1EXPORTS\*(R"\s0, above, and the options, below.)
.PP
Any arguments after \f(CW$data\fR are passed along after to \f(CW\*(C`write_handle\*(C'\fR.
.PP
Like \f(CW\*(C`write_file\*(C'\fR, this method can take a leading hashref with one valid
argument: \f(CW\*(C`binmode\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2008 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
