.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Throwable 3"
.TH Throwable 3 "2015-07-01" "perl v5.22.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Throwable \- a role for classes that can be thrown
.SH "VERSION"
.IX Header "VERSION"
version 0.200013
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  package Redirect;
\&  # NOTE: Moo can also be used here instead of Moose
\&  use Moose;
\&  with \*(AqThrowable\*(Aq;
\&
\&  has url => (is => \*(Aqro\*(Aq);
.Ve
.PP
\&...then later...
.PP
.Vb 1
\&  Redirect\->throw({ url => $url });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Throwable is a role for classes that are meant to be thrown as exceptions to
standard program flow.  It is very simple and does only two things: saves any
previous value for \f(CW$@\fR and calls \f(CW\*(C`die $self\*(C'\fR.
.PP
Throwable is implemented with Moo, so you can stick to Moo or use Moose,
as you prefer.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "previous_exception"
.IX Subsection "previous_exception"
This attribute is created automatically, and stores the value of \f(CW$@\fR when the
Throwable object is created.  This is done on a \fIbest effort basis\fR.  \f(CW$@\fR is
subject to lots of spooky action-at-a-distance.  For now, there are clearly
ways that the previous exception could be lost.
.SH "METHODS"
.IX Header "METHODS"
.SS "throw"
.IX Subsection "throw"
.Vb 1
\&  Something::Throwable\->throw({ attr => $value });
.Ve
.PP
This method will call new, passing all arguments along to new, and will then
use the created object as the only argument to \f(CW\*(C`die\*(C'\fR.
.PP
If called on an object that does Throwable, the object will be rethrown.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Arthur Axel 'fREW' Schmidt <frioux@gmail.com>
.IP "\(bu" 4
Brian Manning <brian@xaoc.org>
.IP "\(bu" 4
Brian Manning <xaoc@cpan.org>
.IP "\(bu" 4
Dagfinn Ilmari Manns√•ker <ilmari@ilmari.org>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.IP "\(bu" 4
David E. Wheeler <david@justatheory.com>
.IP "\(bu" 4
Graham Knop <haarg@haarg.org>
.IP "\(bu" 4
Jeffrey Ryan Thalhammer <jeff@imaginative\-software.com>
.IP "\(bu" 4
Justin Hunter <justin.d.hunter@gmail.com>
.IP "\(bu" 4
Matt S Trout <mst@shadowcat.co.uk>
.IP "\(bu" 4
Olaf Alders <olaf@wundersolutions.com>
.IP "\(bu" 4
Toby Inkster <mail@tobyinkster.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2015 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
