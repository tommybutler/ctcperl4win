.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Win32 3pm"
.TH Win32 3pm "2018-01-01" "perl v5.22.5" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Win32 \- Interfaces to some Win32 API Functions
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Win32 module contains functions to access Win32 APIs.
.SS "Alphabetical Listing of Win32 Functions"
.IX Subsection "Alphabetical Listing of Win32 Functions"
It is recommended to \f(CW\*(C`use Win32;\*(C'\fR before any of these functions;
however, for backwards compatibility, those marked as [\s-1CORE\s0] will
automatically do this for you.
.PP
In the function descriptions below the term \fIUnicode string\fR is used
to indicate that the string may contain characters outside the system
codepage.  The caveat \fIIf supported by the core Perl version\fR
generally means Perl 5.8.9 and later, though some Unicode pathname
functionality may work on earlier versions.
.IP "Win32::AbortSystemShutdown(\s-1MACHINE\s0)" 4
.IX Item "Win32::AbortSystemShutdown(MACHINE)"
Aborts a system shutdown (started by the
InitiateSystemShutdown function) on the specified \s-1MACHINE.\s0
.IP "\fIWin32::BuildNumber()\fR" 4
.IX Item "Win32::BuildNumber()"
[\s-1CORE\s0] Returns the ActivePerl build number.  This function is
only available in the ActivePerl binary distribution.
.IP "Win32::CopyFile(\s-1FROM, TO, OVERWRITE\s0)" 4
.IX Item "Win32::CopyFile(FROM, TO, OVERWRITE)"
[\s-1CORE\s0] The \fIWin32::CopyFile()\fR function copies an existing file to a new
file.  All file information like creation time and file attributes will
be copied to the new file.  However it will \fBnot\fR copy the security
information.  If the destination file already exists it will only be
overwritten when the \s-1OVERWRITE\s0 parameter is true.  But even this will
not overwrite a read-only file; you have to \fIunlink()\fR it first
yourself.
.IP "Win32::CreateDirectory(\s-1DIRECTORY\s0)" 4
.IX Item "Win32::CreateDirectory(DIRECTORY)"
Creates the \s-1DIRECTORY\s0 and returns a true value on success.  Check $^E
on failure for extended error information.
.Sp
\&\s-1DIRECTORY\s0 may contain Unicode characters outside the system codepage.
Once the directory has been created you can use
\&\fIWin32::GetANSIPathName()\fR to get a name that can be passed to system
calls and external programs.
.IP "Win32::CreateFile(\s-1FILE\s0)" 4
.IX Item "Win32::CreateFile(FILE)"
Creates the \s-1FILE\s0 and returns a true value on success.  Check $^E on
failure for extended error information.
.Sp
\&\s-1FILE\s0 may contain Unicode characters outside the system codepage.  Once
the file has been created you can use \fIWin32::GetANSIPathName()\fR to get
a name that can be passed to system calls and external programs.
.IP "\fIWin32::DomainName()\fR" 4
.IX Item "Win32::DomainName()"
[\s-1CORE\s0] Returns the name of the Microsoft Network domain or workgroup
that the owner of the current perl process is logged into.  The
\&\*(L"Workstation\*(R" service must be running to determine this
information.  This function does \fBnot\fR work on Windows 9x.
.IP "Win32::ExpandEnvironmentStrings(\s-1STRING\s0)" 4
.IX Item "Win32::ExpandEnvironmentStrings(STRING)"
Takes \s-1STRING\s0 and replaces all referenced environment variable
names with their defined values.  References to environment variables
take the form \f(CW\*(C`%VariableName%\*(C'\fR.  Case is ignored when looking up the
VariableName in the environment.  If the variable is not found then the
original \f(CW\*(C`%VariableName%\*(C'\fR text is retained.  Has the same effect
as the following:
.Sp
.Vb 1
\&        $string =~ s/%([^%]*)%/$ENV{$1} || "%$1%"/eg
.Ve
.Sp
However, this function may return a Unicode string if the environment
variable being expanded hasn't been assigned to via \f(CW%ENV\fR.  Access
to \f(CW%ENV\fR is currently always using byte semantics.
.IP "Win32::FormatMessage(\s-1ERRORCODE\s0)" 4
.IX Item "Win32::FormatMessage(ERRORCODE)"
[\s-1CORE\s0] Converts the supplied Win32 error number (e.g. returned by
\&\fIWin32::GetLastError()\fR) to a descriptive string.  Analogous to the
\&\fIperror()\fR standard-C library function.  Note that \f(CW$^E\fR used
in a string context has much the same effect.
.Sp
.Vb 2
\&        C:\e> perl \-e "$^E = 26; print $^E;"
\&        The specified disk or diskette cannot be accessed
.Ve
.IP "\fIWin32::FsType()\fR" 4
.IX Item "Win32::FsType()"
[\s-1CORE\s0] Returns the name of the filesystem of the currently active
drive (like '\s-1FAT\s0' or '\s-1NTFS\s0').  In list context it returns three values:
(\s-1FSTYPE, FLAGS, MAXCOMPLEN\s0).  \s-1FSTYPE\s0 is the filesystem type as
before.  \s-1FLAGS\s0 is a combination of values of the following table:
.Sp
.Vb 12
\&        0x00000001  supports case\-sensitive filenames
\&        0x00000002  preserves the case of filenames
\&        0x00000004  supports Unicode in filenames
\&        0x00000008  preserves and enforces ACLs
\&        0x00000010  supports file\-based compression
\&        0x00000020  supports disk quotas
\&        0x00000040  supports sparse files
\&        0x00000080  supports reparse points
\&        0x00000100  supports remote storage
\&        0x00008000  is a compressed volume (e.g. DoubleSpace)
\&        0x00010000  supports object identifiers
\&        0x00020000  supports the Encrypted File System (EFS)
.Ve
.Sp
\&\s-1MAXCOMPLEN\s0 is the maximum length of a filename component (the part
between two backslashes) on this file system.
.IP "Win32::FreeLibrary(\s-1HANDLE\s0)" 4
.IX Item "Win32::FreeLibrary(HANDLE)"
Unloads a previously loaded dynamic-link library.  The \s-1HANDLE\s0 is
no longer valid after this call.  See LoadLibrary
for information on dynamically loading a library.
.IP "\fIWin32::GetACP()\fR" 4
.IX Item "Win32::GetACP()"
Returns the current Windows \s-1ANSI\s0 code page identifier for the operating
system.  See also \fIGetOEMCP()\fR, \fIGetConsoleCP()\fR and \fIGetConsoleOutputCP()\fR.
.IP "Win32::GetANSIPathName(\s-1FILENAME\s0)" 4
.IX Item "Win32::GetANSIPathName(FILENAME)"
Returns an \s-1ANSI\s0 version of \s-1FILENAME.\s0  This may be the short name
if the long name cannot be represented in the system codepage.
.Sp
While not currently implemented, it is possible that in the future
this function will convert only parts of the path to \s-1FILENAME\s0 to a
short form.
.Sp
If \s-1FILENAME\s0 doesn't exist on the filesystem, or if the filesystem
doesn't support short \s-1ANSI\s0 filenames, then this function will
translate the Unicode name into the system codepage using replacement
characters.
.IP "\fIWin32::GetArchName()\fR" 4
.IX Item "Win32::GetArchName()"
Use of this function is deprecated.  It is equivalent with
\&\f(CW$ENV\fR{\s-1PROCESSOR_ARCHITECTURE\s0}.  This might not work on Win9X.
.IP "\fIWin32::GetChipName()\fR" 4
.IX Item "Win32::GetChipName()"
Returns the processor type: 386, 486 or 586 for x86 processors, 8664
for the x64 processor and 2200 for the Itanium.  Since it returns the
native processor type it will return a 64\-bit processor type even when
called from a 32\-bit Perl running on 64\-bit Windows.
.IP "\fIWin32::GetConsoleCP()\fR" 4
.IX Item "Win32::GetConsoleCP()"
Returns the input code page used by the console associated with the
calling process.  To set the console's input code page, see
\&\fISetConsoleCP()\fR.  See also \fIGetConsoleOutputCP()\fR, \fIGetACP()\fR and
\&\fIGetOEMCP()\fR.
.IP "\fIWin32::GetConsoleOutputCP()\fR" 4
.IX Item "Win32::GetConsoleOutputCP()"
Returns the output code page used by the console associated with the
calling process.  To set the console's output code page, see
\&\fISetConsoleOutputCP()\fR.  See also \fIGetConsoleCP()\fR, \fIGetACP()\fR, and
\&\fIGetOEMCP()\fR.
.IP "\fIWin32::GetCwd()\fR" 4
.IX Item "Win32::GetCwd()"
[\s-1CORE\s0] Returns the current active drive and directory.  This function
does not return a \s-1UNC\s0 path, since the functionality required for such
a feature is not available under Windows 95.
.Sp
If supported by the core Perl version, this function will return an
\&\s-1ANSI\s0 path name for the current directory if the long pathname cannot
be represented in the system codepage.
.IP "\fIWin32::GetCurrentProcessId()\fR" 4
.IX Item "Win32::GetCurrentProcessId()"
Returns the process identifier of the current process.  Until the
process terminates, the process identifier uniquely identifies the
process throughout the system.
.Sp
The current process identifier is normally also available via the
predefined $$ variable.  Under \fIfork()\fR emulation however $$ may contain
a pseudo-process identifier that is only meaningful to the Perl
\&\fIkill()\fR, \fIwait()\fR and \fIwaitpid()\fR functions.  The
\&\fIWin32::GetCurrentProcessId()\fR function will always return the regular
Windows process id, even when called from inside a pseudo-process.
.IP "\fIWin32::GetCurrentThreadId()\fR" 4
.IX Item "Win32::GetCurrentThreadId()"
Returns the thread identifier of the calling thread.  Until the thread
terminates, the thread identifier uniquely identifies the thread
throughout the system.
.IP "Win32::GetFileVersion(\s-1FILENAME\s0)" 4
.IX Item "Win32::GetFileVersion(FILENAME)"
Returns the file version number from the \s-1VERSIONINFO\s0 resource of
the executable file or \s-1DLL.\s0  This is a tuple of four 16 bit numbers.
In list context these four numbers will be returned.  In scalar context
they are concatenated into a string, separated by dots.
.IP "Win32::GetFolderPath(\s-1FOLDER\s0 [, \s-1CREATE\s0])" 4
.IX Item "Win32::GetFolderPath(FOLDER [, CREATE])"
Returns the full pathname of one of the Windows special folders.
The folder will be created if it doesn't exist and the optional \s-1CREATE\s0
argument is true.  The following \s-1FOLDER\s0 constants are defined by the
Win32 module, but only exported on demand:
.Sp
.Vb 10
\&        CSIDL_ADMINTOOLS
\&        CSIDL_APPDATA
\&        CSIDL_CDBURN_AREA
\&        CSIDL_COMMON_ADMINTOOLS
\&        CSIDL_COMMON_APPDATA
\&        CSIDL_COMMON_DESKTOPDIRECTORY
\&        CSIDL_COMMON_DOCUMENTS
\&        CSIDL_COMMON_FAVORITES
\&        CSIDL_COMMON_MUSIC
\&        CSIDL_COMMON_PICTURES
\&        CSIDL_COMMON_PROGRAMS
\&        CSIDL_COMMON_STARTMENU
\&        CSIDL_COMMON_STARTUP
\&        CSIDL_COMMON_TEMPLATES
\&        CSIDL_COMMON_VIDEO
\&        CSIDL_COOKIES
\&        CSIDL_DESKTOP
\&        CSIDL_DESKTOPDIRECTORY
\&        CSIDL_FAVORITES
\&        CSIDL_FONTS
\&        CSIDL_HISTORY
\&        CSIDL_INTERNET_CACHE
\&        CSIDL_LOCAL_APPDATA
\&        CSIDL_MYMUSIC
\&        CSIDL_MYPICTURES
\&        CSIDL_MYVIDEO
\&        CSIDL_NETHOOD
\&        CSIDL_PERSONAL
\&        CSIDL_PRINTHOOD
\&        CSIDL_PROFILE
\&        CSIDL_PROGRAMS
\&        CSIDL_PROGRAM_FILES
\&        CSIDL_PROGRAM_FILES_COMMON
\&        CSIDL_RECENT
\&        CSIDL_RESOURCES
\&        CSIDL_RESOURCES_LOCALIZED
\&        CSIDL_SENDTO
\&        CSIDL_STARTMENU
\&        CSIDL_STARTUP
\&        CSIDL_SYSTEM
\&        CSIDL_TEMPLATES
\&        CSIDL_WINDOWS
.Ve
.Sp
Note that not all folders are defined on all versions of Windows.
.Sp
Please refer to the \s-1MSDN\s0 documentation of the \s-1CSIDL\s0 constants,
currently available at:
.Sp
http://msdn.microsoft.com/library/default.asp?url=/library/en\-us/shellcc/platform/shell/reference/enums/csidl.asp
.Sp
This function will return an \s-1ANSI\s0 folder path if the long name cannot
be represented in the system codepage.  Use \fIWin32::GetLongPathName()\fR
on the result of \fIWin32::GetFolderPath()\fR if you want the Unicode
version of the folder name.
.IP "Win32::GetFullPathName(\s-1FILENAME\s0)" 4
.IX Item "Win32::GetFullPathName(FILENAME)"
[\s-1CORE\s0] GetFullPathName combines the \s-1FILENAME\s0 with the current drive
and directory name and returns a fully qualified (aka, absolute)
path name.  In list context it returns two elements: (\s-1PATH, FILE\s0) where
\&\s-1PATH\s0 is the complete pathname component (including trailing backslash)
and \s-1FILE\s0 is just the filename part.  Note that no attempt is made to
convert 8.3 components in the supplied \s-1FILENAME\s0 to longnames or
vice-versa.  Compare with \fIWin32::GetShortPathName()\fR and
\&\fIWin32::GetLongPathName()\fR.
.Sp
If supported by the core Perl version, this function will return an
\&\s-1ANSI\s0 path name if the full pathname cannot be represented in the
system codepage.
.IP "\fIWin32::GetLastError()\fR" 4
.IX Item "Win32::GetLastError()"
[\s-1CORE\s0] Returns the last error value generated by a call to a Win32 \s-1API\s0
function.  Note that \f(CW$^E\fR used in a numeric context amounts to the
same value.
.IP "Win32::GetLongPathName(\s-1PATHNAME\s0)" 4
.IX Item "Win32::GetLongPathName(PATHNAME)"
[\s-1CORE\s0] Returns a representation of \s-1PATHNAME\s0 composed of longname
components (if any).  The result may not necessarily be longer
than \s-1PATHNAME.\s0  No attempt is made to convert \s-1PATHNAME\s0 to the
absolute path.  Compare with \fIWin32::GetShortPathName()\fR and
\&\fIWin32::GetFullPathName()\fR.
.Sp
This function may return the pathname in Unicode if it cannot be
represented in the system codepage.  Use \fIWin32::GetANSIPathName()\fR
before passing the path to a system call or another program.
.IP "\fIWin32::GetNextAvailDrive()\fR" 4
.IX Item "Win32::GetNextAvailDrive()"
[\s-1CORE\s0] Returns a string in the form of \*(L"<d>:\*(R" where <d> is the first
available drive letter.
.IP "\fIWin32::GetOEMCP()\fR" 4
.IX Item "Win32::GetOEMCP()"
Returns the current original equipment manufacturer (\s-1OEM\s0) code page
identifier for the operating system.  See also \fIGetACP()\fR, \fIGetConsoleCP()\fR
and \fIGetConsoleOutputCP()\fR.
.IP "\fIWin32::GetOSDisplayName()\fR" 4
.IX Item "Win32::GetOSDisplayName()"
Returns the \*(L"marketing\*(R" name of the Windows operating system version
being used.  It returns names like these (random samples):
.Sp
.Vb 7
\&   Windows 2000 Datacenter Server
\&   Windows XP Professional
\&   Windows XP Tablet PC Edition
\&   Windows Home Server
\&   Windows Server 2003 Enterprise Edition for Itanium\-based Systems
\&   Windows Vista Ultimate (32\-bit)
\&   Windows Small Business Server 2008 R2 (64\-bit)
.Ve
.Sp
The display name describes the native Windows version, so even on a
32\-bit Perl this function may return a \*(L"Windows ... (64\-bit)\*(R" name
when running on a 64\-bit Windows.
.Sp
This function should only be used to display the actual \s-1OS\s0 name to the
user; it should not be used to determine the class of operating systems
this system belongs to.  The \fIWin32::GetOSName()\fR, Win32::GetOSVersion,
\&\fIWin32::GetProductInfo()\fR and \fIWin32::GetSystemMetrics()\fR functions provide
the base information to check for certain capabilities, or for families
of \s-1OS\s0 releases.
.IP "\fIWin32::GetOSName()\fR" 4
.IX Item "Win32::GetOSName()"
In scalar context returns the name of the Win32 operating system
being used.  In list context returns a two element list of the \s-1OS\s0 name
and whatever edition information is known about the particular build
(for Win9X boxes) and whatever service packs have been installed.
The latter is roughly equivalent to the first item returned by
\&\fIGetOSVersion()\fR in list context.
.Sp
The description will also include tags for other special editions,
like \*(L"R2\*(R", \*(L"Media Center\*(R", \*(L"Tablet \s-1PC\*(R",\s0 or \*(L"Starter Edition\*(R".
.Sp
Currently the possible values for the \s-1OS\s0 name are
.Sp
.Vb 10
\&    WinWin32s
\&    Win95
\&    Win98
\&    WinMe
\&    WinNT3.51
\&    WinNT4
\&    Win2000
\&    WinXP/.Net
\&    Win2003
\&    WinHomeSvr
\&    WinVista
\&    Win2008
\&    Win7
.Ve
.Sp
This routine is just a simple interface into \fIGetOSVersion()\fR.  More
specific or demanding situations should use that instead.  Another
option would be to use \fIPOSIX::uname()\fR, however the latter appears to
report only the \s-1OS\s0 family name and not the specific \s-1OS.\s0  In scalar
context it returns just the \s-1ID.\s0
.Sp
The name \*(L"WinXP/.Net\*(R" is used for historical reasons only, to maintain
backwards compatibility of the Win32 module.  Windows .NET Server has
been renamed as Windows 2003 Server before final release and uses a
different major/minor version number than Windows \s-1XP.\s0
.Sp
Similarly the name \*(L"WinWin32s\*(R" should have been \*(L"Win32s\*(R" but has been
kept as-is for backwards compatibility reasons too.
.IP "\fIWin32::GetOSVersion()\fR" 4
.IX Item "Win32::GetOSVersion()"
[\s-1CORE\s0] Returns the list (\s-1STRING, MAJOR, MINOR, BUILD, ID\s0), where the
elements are, respectively: An arbitrary descriptive string, the major
version number of the operating system, the minor version number, the
build number, and a digit indicating the actual operating system.
For the \s-1ID,\s0 the values are 0 for Win32s, 1 for Windows 9X/Me and 2 for
Windows NT/2000/XP/2003/Vista/2008/7.  In scalar context it returns just
the \s-1ID.\s0
.Sp
Currently known values for \s-1ID MAJOR\s0 and \s-1MINOR\s0 are as follows:
.Sp
.Vb 5
\&    OS                      ID    MAJOR   MINOR
\&    Win32s                   0      \-       \-
\&    Windows 95               1      4       0
\&    Windows 98               1      4      10
\&    Windows Me               1      4      90
\&
\&    Windows NT 3.51          2      3      51
\&    Windows NT 4             2      4       0
\&
\&    Windows 2000             2      5       0
\&    Windows XP               2      5       1
\&    Windows Server 2003      2      5       2
\&    Windows Server 2003 R2   2      5       2
\&    Windows Home Server      2      5       2
\&
\&    Windows Vista            2      6       0
\&    Windows Server 2008      2      6       0
\&    Windows 7                2      6       1
\&    Windows Server 2008 R2   2      6       1
\&    Windows 8                2      6       2
\&    Windows Server 2012      2      6       2
.Ve
.Sp
On Windows \s-1NT 4 SP6\s0 and later this function returns the following
additional values: \s-1SPMAJOR, SPMINOR, SUITEMASK, PRODUCTTYPE.\s0
.Sp
The version numbers for Windows 2003 and Windows Home Server are
identical; the \s-1SUITEMASK\s0 field must be used to differentiate between
them.
.Sp
The version numbers for Windows Vista and Windows Server 2008 are
identical; the \s-1PRODUCTTYPE\s0 field must be used to differentiate between
them.
.Sp
The version numbers for Windows 7 and Windows Server 2008 R2 are
identical; the \s-1PRODUCTTYPE\s0 field must be used to differentiate between
them.
.Sp
The version numbers for Windows 8 and Windows Server 2012 are
identical; the \s-1PRODUCTTYPE\s0 field must be used to differentiate between
them.
.Sp
\&\s-1SPMAJOR\s0 and \s-1SPMINOR\s0 are the version numbers of the latest
installed service pack.
.Sp
\&\s-1SUITEMASK\s0 is a bitfield identifying the product suites available on
the system.  Known bits are:
.Sp
.Vb 10
\&    VER_SUITE_SMALLBUSINESS             0x00000001
\&    VER_SUITE_ENTERPRISE                0x00000002
\&    VER_SUITE_BACKOFFICE                0x00000004
\&    VER_SUITE_COMMUNICATIONS            0x00000008
\&    VER_SUITE_TERMINAL                  0x00000010
\&    VER_SUITE_SMALLBUSINESS_RESTRICTED  0x00000020
\&    VER_SUITE_EMBEDDEDNT                0x00000040
\&    VER_SUITE_DATACENTER                0x00000080
\&    VER_SUITE_SINGLEUSERTS              0x00000100
\&    VER_SUITE_PERSONAL                  0x00000200
\&    VER_SUITE_BLADE                     0x00000400
\&    VER_SUITE_EMBEDDED_RESTRICTED       0x00000800
\&    VER_SUITE_SECURITY_APPLIANCE        0x00001000
\&    VER_SUITE_STORAGE_SERVER            0x00002000
\&    VER_SUITE_COMPUTE_SERVER            0x00004000
\&    VER_SUITE_WH_SERVER                 0x00008000
.Ve
.Sp
The VER_SUITE_xxx names are listed here to cross reference the Microsoft
documentation.  The Win32 module does not provide symbolic names for these
constants.
.Sp
\&\s-1PRODUCTTYPE\s0 provides additional information about the system.  It should
be one of the following integer values:
.Sp
.Vb 3
\&    1 \- Workstation (NT 4, 2000 Pro, XP Home, XP Pro, Vista, etc)
\&    2 \- Domaincontroller
\&    3 \- Server (2000 Server, Server 2003, Server 2008, etc)
.Ve
.Sp
Note that a server that is also a domain controller is reported as
\&\s-1PRODUCTTYPE 2\s0 (Domaincontroller) and not \s-1PRODUCTTYPE 3\s0 (Server).
.IP "Win32::GetShortPathName(\s-1PATHNAME\s0)" 4
.IX Item "Win32::GetShortPathName(PATHNAME)"
[\s-1CORE\s0] Returns a representation of \s-1PATHNAME\s0 that is composed of short
(8.3) path components where available.  For path components where the
file system has not generated the short form the returned path will
use the long form, so this function might still for instance return a
path containing spaces.  Returns \f(CW\*(C`undef\*(C'\fR when the \s-1PATHNAME\s0 does not
exist. Compare with \fIWin32::GetFullPathName()\fR and
\&\fIWin32::GetLongPathName()\fR.
.IP "Win32::GetSystemMetrics(\s-1INDEX\s0)" 4
.IX Item "Win32::GetSystemMetrics(INDEX)"
Retrieves the specified system metric or system configuration setting.
Please refer to the Microsoft documentation of the \fIGetSystemMetrics()\fR
function for a reference of available \s-1INDEX\s0 values.  All system
metrics return integer values.
.IP "Win32::GetProcAddress(\s-1INSTANCE, PROCNAME\s0)" 4
.IX Item "Win32::GetProcAddress(INSTANCE, PROCNAME)"
Returns the address of a function inside a loaded library.  The
information about what you can do with this address has been lost in
the mist of time.  Use the Win32::API module instead of this deprecated
function.
.IP "Win32::GetProductInfo(\s-1OSMAJOR, OSMINOR, SPMAJOR, SPMINOR\s0)" 4
.IX Item "Win32::GetProductInfo(OSMAJOR, OSMINOR, SPMAJOR, SPMINOR)"
Retrieves the product type for the operating system on the local
computer, and maps the type to the product types supported by the
specified operating system.  Please refer to the Microsoft
documentation of the \fIGetProductInfo()\fR function for more information
about the parameters and return value.  This function requires Windows
Vista or later.
.Sp
See also the \fIWin32::GetOSName()\fR and \fIWin32::GetOSDisplayName()\fR
functions which provide a higher level abstraction of the data
returned by this function.
.IP "\fIWin32::GetTickCount()\fR" 4
.IX Item "Win32::GetTickCount()"
[\s-1CORE\s0] Returns the number of milliseconds elapsed since the last
system boot.  Resolution is limited to system timer ticks (about 10ms
on WinNT and 55ms on Win9X).
.IP "\fIWin32::GuidGen()\fR" 4
.IX Item "Win32::GuidGen()"
Creates a globally unique 128 bit integer that can be used as a
persistent identifier in a distributed setting. To a very high degree
of certainty this function returns a unique value. No other
invocation, on the same or any other system (networked or not), should
return the same value.
.Sp
The return value is formatted according to \s-1OLE\s0 conventions, as groups
of hex digits with surrounding braces.  For example:
.Sp
.Vb 1
\&    {09531CF1\-D0C7\-4860\-840C\-1C8C8735E2AD}
.Ve
.IP "Win32::InitiateSystemShutdown" 4
.IX Item "Win32::InitiateSystemShutdown"
(\s-1MACHINE, MESSAGE, TIMEOUT, FORCECLOSE, REBOOT\s0)
.Sp
Shutsdown the specified \s-1MACHINE,\s0 notifying users with the
supplied \s-1MESSAGE,\s0 within the specified \s-1TIMEOUT\s0 interval.  Forces
closing of all documents without prompting the user if \s-1FORCECLOSE\s0 is
true, and reboots the machine if \s-1REBOOT\s0 is true.  This function works
only on WinNT.
.IP "\fIWin32::IsAdminUser()\fR" 4
.IX Item "Win32::IsAdminUser()"
Returns non zero if the account in whose security context the
current process/thread is running belongs to the local group of
Administrators in the built-in system domain; returns 0 if not.
On Windows Vista it will only return non-zero if the process is
actually running with elevated privileges.  Returns \f(CW\*(C`undef\*(C'\fR
and prints a warning if an error occurred.  This function always
returns 1 on Win9X.
.IP "\fIWin32::IsWinNT()\fR" 4
.IX Item "Win32::IsWinNT()"
[\s-1CORE\s0] Returns non zero if the Win32 subsystem is Windows \s-1NT.\s0
.IP "\fIWin32::IsWin95()\fR" 4
.IX Item "Win32::IsWin95()"
[\s-1CORE\s0] Returns non zero if the Win32 subsystem is Windows 95.
.IP "Win32::LoadLibrary(\s-1LIBNAME\s0)" 4
.IX Item "Win32::LoadLibrary(LIBNAME)"
Loads a dynamic link library into memory and returns its module
handle.  This handle can be used with \fIWin32::GetProcAddress()\fR and
\&\fIWin32::FreeLibrary()\fR.  This function is deprecated.  Use the Win32::API
module instead.
.IP "\fIWin32::LoginName()\fR" 4
.IX Item "Win32::LoginName()"
[\s-1CORE\s0] Returns the username of the owner of the current perl process.
The return value may be a Unicode string.
.IP "Win32::LookupAccountName(\s-1SYSTEM, ACCOUNT, DOMAIN, SID, SIDTYPE\s0)" 4
.IX Item "Win32::LookupAccountName(SYSTEM, ACCOUNT, DOMAIN, SID, SIDTYPE)"
Looks up \s-1ACCOUNT\s0 on \s-1SYSTEM\s0 and returns the domain name the \s-1SID\s0 and
the \s-1SID\s0 type.
.IP "Win32::LookupAccountSID(\s-1SYSTEM, SID, ACCOUNT, DOMAIN, SIDTYPE\s0)" 4
.IX Item "Win32::LookupAccountSID(SYSTEM, SID, ACCOUNT, DOMAIN, SIDTYPE)"
Looks up \s-1SID\s0 on \s-1SYSTEM\s0 and returns the account name, domain name,
and the \s-1SID\s0 type.
.IP "Win32::MsgBox(\s-1MESSAGE\s0 [, \s-1FLAGS\s0 [, \s-1TITLE\s0]])" 4
.IX Item "Win32::MsgBox(MESSAGE [, FLAGS [, TITLE]])"
Create a dialog box containing \s-1MESSAGE.\s0  \s-1FLAGS\s0 specifies the
required icon and buttons according to the following table:
.Sp
.Vb 6
\&        0 = OK
\&        1 = OK and Cancel
\&        2 = Abort, Retry, and Ignore
\&        3 = Yes, No and Cancel
\&        4 = Yes and No
\&        5 = Retry and Cancel
\&
\&        MB_ICONSTOP          "X" in a red circle
\&        MB_ICONQUESTION      question mark in a bubble
\&        MB_ICONEXCLAMATION   exclamation mark in a yellow triangle
\&        MB_ICONINFORMATION   "i" in a bubble
.Ve
.Sp
\&\s-1TITLE\s0 specifies an optional window title.  The default is \*(L"Perl\*(R".
.Sp
The function returns the menu id of the selected push button:
.Sp
.Vb 1
\&        0  Error
\&
\&        1  OK
\&        2  Cancel
\&        3  Abort
\&        4  Retry
\&        5  Ignore
\&        6  Yes
\&        7  No
.Ve
.IP "\fIWin32::NodeName()\fR" 4
.IX Item "Win32::NodeName()"
[\s-1CORE\s0] Returns the Microsoft Network node-name of the current machine.
.IP "Win32::OutputDebugString(\s-1STRING\s0)" 4
.IX Item "Win32::OutputDebugString(STRING)"
Sends a string to the application or system debugger for display.
The function does nothing if there is no active debugger.
.Sp
Alternatively one can use the \fIDebug Viewer\fR application to
watch the \fIOutputDebugString()\fR output:
.Sp
http://www.microsoft.com/technet/sysinternals/utilities/debugview.mspx
.IP "Win32::RegisterServer(\s-1LIBRARYNAME\s0)" 4
.IX Item "Win32::RegisterServer(LIBRARYNAME)"
Loads the \s-1DLL LIBRARYNAME\s0 and calls the function DllRegisterServer.
.IP "Win32::SetChildShowWindow(\s-1SHOWWINDOW\s0)" 4
.IX Item "Win32::SetChildShowWindow(SHOWWINDOW)"
[\s-1CORE\s0] Sets the \fIShowMode\fR of child processes started by \fIsystem()\fR.
By default \fIsystem()\fR will create a new console window for child
processes if Perl itself is not running from a console.  Calling
\&\fISetChildShowWindow\fR\|(0) will make these new console windows invisible.
Calling \fISetChildShowWindow()\fR without arguments reverts \fIsystem()\fR to the
default behavior.  The return value of \fISetChildShowWindow()\fR is the
previous setting or \f(CW\*(C`undef\*(C'\fR.
.Sp
The following symbolic constants for \s-1SHOWWINDOW\s0 are available
(but not exported) from the Win32 module: \s-1SW_HIDE, SW_SHOWNORMAL,
SW_SHOWMINIMIZED, SW_SHOWMAXIMIZED\s0 and \s-1SW_SHOWNOACTIVATE.\s0
.IP "Win32::SetConsoleCP(\s-1ID\s0)" 4
.IX Item "Win32::SetConsoleCP(ID)"
Sets the input code page used by the console associated with the
calling process.  The return value of \fISetConsoleCP()\fR is nonzero on
success or zero on failure.  To get the console's input code page, see
\&\fIGetConsoleCP()\fR.
.IP "Win32::SetConsoleOutputCP(\s-1ID\s0)" 4
.IX Item "Win32::SetConsoleOutputCP(ID)"
Sets the output code page used by the console associated with the
calling process.  The return value of \fISetConsoleOutputCP()\fR is nonzero on
success or zero on failure.  To get the console's output code page, see
\&\fIGetConsoleOutputCP()\fR.
.IP "Win32::SetCwd(\s-1NEWDIRECTORY\s0)" 4
.IX Item "Win32::SetCwd(NEWDIRECTORY)"
[\s-1CORE\s0] Sets the current active drive and directory.  This function does not
work with \s-1UNC\s0 paths, since the functionality required to required for
such a feature is not available under Windows 95.
.IP "Win32::SetLastError(\s-1ERROR\s0)" 4
.IX Item "Win32::SetLastError(ERROR)"
[\s-1CORE\s0] Sets the value of the last error encountered to \s-1ERROR.\s0  This is
that value that will be returned by the \fIWin32::GetLastError()\fR
function.
.IP "Win32::Sleep(\s-1TIME\s0)" 4
.IX Item "Win32::Sleep(TIME)"
[\s-1CORE\s0] Pauses for \s-1TIME\s0 milliseconds.  The timeslices are made available
to other processes and threads.
.IP "Win32::Spawn(\s-1COMMAND, ARGS, PID\s0)" 4
.IX Item "Win32::Spawn(COMMAND, ARGS, PID)"
[\s-1CORE\s0] Spawns a new process using the supplied \s-1COMMAND,\s0 passing in
arguments in the string \s-1ARGS.\s0  The pid of the new process is stored in
\&\s-1PID.\s0  This function is deprecated.  Please use the Win32::Process module
instead.
.IP "Win32::UnregisterServer(\s-1LIBRARYNAME\s0)" 4
.IX Item "Win32::UnregisterServer(LIBRARYNAME)"
Loads the \s-1DLL LIBRARYNAME\s0 and calls the function
DllUnregisterServer.
