.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Sub::Exporter::GlobExporter 3"
.TH Sub::Exporter::GlobExporter 3 "2015-11-05" "perl v5.22.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Sub::Exporter::GlobExporter \- export shared globs with Sub::Exporter collectors
.SH "VERSION"
.IX Header "VERSION"
version 0.005
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
First, you write something that exports globs:
.PP
.Vb 1
\&  package Shared::Symbol;
\&
\&  use Sub::Exporter;
\&  use Sub::Exporter::GlobExport qw(glob_exporter);
\&
\&  use Sub::Exporter \-setup => {
\&    ...
\&    collectors => { \*(Aq$Symbol\*(Aq => glob_exporter(Symbol => \e\*(Aq_shared_globref\*(Aq) },
\&  };
\&
\&  sub _shared_globref { return \e*Common }
.Ve
.PP
Now other code can import \f(CW$Symbol\fR and get their \f(CW*Symbol\fR made an alias to
\&\f(CW*Shared::Symbol::Common\fR.
.PP
If you don't know what this means or why you'd want to do it, you may want to
stop reading now.
.PP
The other class can do something like this:
.PP
.Vb 1
\&  use Shared::Symbol \*(Aq$Symbol\*(Aq;
\&
\&  print $Symbol; # prints the scalar entry of *Shared::Symbol::Common
.Ve
.PP
\&...or...
.PP
.Vb 1
\&  use Shared::Symbol \*(Aq$Symbol\*(Aq => { \-as => \*(AqSharedSymbol\*(Aq };
\&
\&  print $SharedSymbol; # prints the scalar entry of *Shared::Symbol::Common
.Ve
.PP
\&...or...
.PP
.Vb 2
\&  my $glob;
\&  use Shared::Symbol \*(Aq$Symbol\*(Aq => { \-as => \e$glob };
\&
\&  print $$glob; # prints the scalar entry of *Shared::Symbol::Common
.Ve
.SH "OVERVIEW"
.IX Header "OVERVIEW"
Sub::Exporter::GlobExporter provides only one routine, \f(CW\*(C`glob_exporter\*(C'\fR, which
may be called either by its full name or may be imported on request.
.PP
.Vb 1
\&  my $exporter = glob_exporter( $default_name, $globref_locator );
.Ve
.PP
The routine returns a collection validator that will export a glob into the importing package.  It will
export it under the name \f(CW$default_name\fR, unless an alternate name is given
(as shown above).  The glob that is installed is specified by the
\&\f(CW$globref_locator\fR, which can be either the globref itself, or a reference to
a string which will be called on the exporter
.PP
For an example, see the \*(L"\s-1SYNOPSIS\*(R"\s0, in which a method is defined to produce
the globref to share.  This allows the glob-exporting package to be subclassed,
so the subclass may choose to either re-use the same glob when exporting or to
export a new one.
.PP
If there are entries in the arguments to the globref-exporting collector
\&\fIother\fR than those beginning with a dash, a hashref of them will be passed to
the globref locator.  In other words, if we were to write this:
.PP
.Vb 1
\&  use Shared::Symbol \*(Aq$Symbol\*(Aq => { arg => 1, \-as => 2 };
.Ve
.PP
It would result in a call like the following:
.PP
.Vb 1
\&  my $globref = Shared::Symbol\->_shared_globref({ arg => 1 });
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo Signes <rjbs@cpan.org>
.SH "CONTRIBUTOR"
.IX Header "CONTRIBUTOR"
David Steinbrunner <dsteinbrunner@pobox.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
