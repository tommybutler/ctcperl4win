.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Internals::DumpArenas 3pm"
.TH Internals::DumpArenas 3pm "2018-01-01" "perl v5.22.5" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Internals::DumpArenas \- Dump perl memory
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Dumps all of perl's regular values. This iterates over all values
reachable by the perl's normal memory management.
.SH "PERL FUNCTIONS"
.IX Header "PERL FUNCTIONS"
.SS "\fIDumpArenas()\fP"
.IX Subsection "DumpArenas()"
Dumps everything to \s-1STDERR.\s0
.SH "C FUNCTIONS"
.IX Header "C FUNCTIONS"
.SS "DumpArenas(pTHX)"
.IX Subsection "DumpArenas(pTHX)"
A C\-exportable function. This calls DumpArenasFd but defaults to
printing to \s-1STDERR.\s0 Depending on whether your perl interpreter is
threaded, accepts the interpreter context.
.PP
From gdb:
.PP
.Vb 6
\&    set $context = Perl_get_context()
\&    if $context
\&        call DumpArenas($context)
\&    else
\&        call DumpArenas()
\&    end
.Ve
.SS "DumpArenasFd(pTHX_ int fd)"
.IX Subsection "DumpArenasFd(pTHX_ int fd)"
An exportable function, and the basis for \fIDumpArenas()\fR. The \f(CW\*(C`fd\*(C'\fR
parameter is the file descriptor to write to. This lets you choose to
write to stdout or something else convenient.
.PP
Like the above function, this also accepts the interpreter context as
an argument for threaded perl.
.PP
From gdb:
.PP
.Vb 8
\&    set $context = Perl_get_context()
\&    if $context
\&        # stdout: 1
\&        # stderr: 2
\&        call DumpArenasFd($context, 1)
\&    else
\&        call DumpArenasFd(1)
\&    end
.Ve
.SH "OUTPUT FORMAT"
.IX Header "OUTPUT FORMAT"
.SS "\s-1INDIVIDUAL VALUES\s0"
.IX Subsection "INDIVIDUAL VALUES"
At a basic level, each and every perl value is printed using the same
facility as the core function Devel::Peek::Dump. This is a
low-level, verbose way of describing perl values:
.PP
.Vb 3
\&  use Devel::Peek;
\&  Dump("Hello world!\en");
\&  Dump(42);
.Ve
.PP
produces the following output. You can see the values \*(L"Hello world!\en\*(R"
and 42 but also other details of perl's implementation.
.PP
.Vb 10
\&  SV = PV(0x9919128) at 0x992a7d8
\&    REFCNT = 1
\&    FLAGS = (POK,READONLY,pPOK)
\&    PV = 0x992f638 "Hello world!\en"\e0
\&    CUR = 13
\&    LEN = 16
\&  SV = IV(0x992a7f4) at 0x992a7f8
\&    REFCNT = 1
\&    FLAGS = (IOK,READONLY,pIOK)
\&    IV = 42
.Ve
.SS "Arrays"
.IX Subsection "Arrays"
Array containers also consume space and hold pointers to perl
values. The general format is:
.PP
.Vb 1
\&  AvARRAY(0x1123e150) = {address,address ...}
.Ve
.PP
Arrays which have more entries allocated than used will show a
doubled-up entry with the \*(L"extra\*(R" part being visible at the end. The
general format is:
.PP
.Vb 1
\&  AvARRAY(0x1117f3c0) = {{addresses}{addresses}}
.Ve
.PP
and a specific example:
.PP
.Vb 1
\&  AvARRAY(0x1117f3c0) = {{0x104a7b98,PL_sv_undef,PL_sv_undef}{PL_sv_undef}}
.Ve
.SS "Hashes"
.IX Subsection "Hashes"
Hash containers also consume space and hold pointers to perl
values. The general format is:
.PP
.Vb 4
\&  HvARRAY(address)
\&    [address "key value"] => address
\&    [address "key value"] => address
\&    ...
.Ve
.PP
A specific example:
.PP
.Vb 4
\&  ARRAY(0x1123e1e0)
\&    [0x814a7c0 "_percentage"] => 0x104d5b78
\&    [0x814a840 "_description"] => 0x104d5b90
\&    [0x814a780 "_treatment_id"] => 0x104d5b60
.Ve
.SS "Pointers"
.IX Subsection "Pointers"
Pointers to special addresses are displayed symbolically:
.IP "PL_sv_undef" 4
.IX Item "PL_sv_undef"
.PD 0
.IP "PL_sv_yes" 4
.IX Item "PL_sv_yes"
.IP "PL_sv_no" 4
.IX Item "PL_sv_no"
.IP "PL_sv_placeholder" 4
.IX Item "PL_sv_placeholder"
.PD
.SS ""
.IX Subsection ""
.SS "\s-1ARENA MAP\s0"
.IX Subsection "ARENA MAP"
Each arena map is also printed as work is begun and finished.
.PP
.Vb 3
\&  START ARENA = (0xfe4f360\-0x1004f340)
\&  ...
\&  END ARENA = (0xfe4f360\-0x1004f340)
.Ve
.PP
Empty slots in the arena maps are printed as:
.PP
.Vb 1
\&  AVAILABLE(0x10abf758)
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-Internals\-DumpArenas at rt.cpan.org\*(C'\fR, or through the web
interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Internals\-DumpArenas>.
I will be notified, and then you'll automatically be notified of
progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&  perldoc Internals::DumpArenas
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Internals\-DumpArenas>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Internals\-DumpArenas>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Internals\-DumpArenas>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Internals\-DumpArenas/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Brian Rice, totally.
.PP
I was inspired by <http://netjam.org/spoon/viz/> and want to make the
same thing for perl.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2009\-2011 Josh Jore, all rights reserved.
Copyright 2015 cPanel Inc, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SOURCE AVAILABILITY"
.IX Header "SOURCE AVAILABILITY"
This source is in Github: <http://github.com/jbenjore/internals\-dumparenas.git>
and the most recent version at <http://github.com/rurban/internals\-dumparenas.git>
.SH "AUTHOR"
.IX Header "AUTHOR"
Josh Jore
