.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "B::C 3pm"
.TH B::C 3pm "2018-01-01" "perl v5.22.5" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
B::C \- Perl compiler's C backend
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        perl \-MO=C[,OPTIONS] foo.pl
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This compiler backend takes Perl source and generates C source code
corresponding to the internal structures that perl uses to run
your program. When the generated C source is compiled and run, it
cuts out the time which perl would have taken to load and parse
your program into its internal semi-compiled form. That means that
compiling with this backend will not help improve the runtime
execution speed of your program but may improve the start-up time.
Depending on the environment in which your program runs this may be
either a help or a hindrance.
.SH "OPTIONS"
.IX Header "OPTIONS"
If there are any non-option arguments, they are taken to be
names of objects to be saved (probably doesn't work properly yet).
Without extra arguments, it saves the main program.
.IP "\fB\-o\fR\fIfilename\fR" 4
.IX Item "-ofilename"
Output to filename instead of \s-1STDOUT\s0
.IP "\fB\-c\fR" 4
.IX Item "-c"
Check and abort.
.Sp
Compiles and prints only warnings, but does not emit C code.
.IP "\fB\-m\fR\fIPackagename\fR \fI(\s-1NYI\s0)\fR" 4
.IX Item "-mPackagename (NYI)"
Prepare to compile a module with all dependent code to a single shared
library rather than to standalone program.
.Sp
Currently this just means that the code for initialising \f(CW\*(C`main_start\*(C'\fR,
\&\f(CW\*(C`main_root\*(C'\fR and \f(CW\*(C`curpad\*(C'\fR are omitted.
The \fI.pm\fR stub to bootstrap the shared lib is not generated.
This option should be used via \f(CW\*(C`perlcc \-m\*(C'\fR.
.Sp
Not yet implemented.
.IP "\fB\-n\fR\fIinit_name\fR" 4
.IX Item "-ninit_name"
Default: \*(L"perl_init\*(R" and \*(L"init_module\*(R"
.IP "\fB\-v\fR" 4
.IX Item "-v"
Verbose compilation. Currently gives a few compilation statistics.
.IP "\fB\-\-\fR" 4
.IX Item "--"
Force end of options
.ie n .IP "\fB\-u\fR\fIPackage\fR ""use Package""" 4
.el .IP "\fB\-u\fR\fIPackage\fR ``use Package''" 4
.IX Item "-uPackage use Package"
Force all subs from Package to be compiled.
.Sp
This allows programs to use eval \*(L"\fIfoo()\fR\*(R" even when sub foo is never
seen to be used at compile time. The down side is that any subs which
really are never used also have code generated. This option is
necessary, for example, if you have a signal handler foo which you
initialise with \f(CW\*(C`$SIG{BAR} = "foo"\*(C'\fR.  A better fix, though, is just
to change it to \f(CW\*(C`$SIG{BAR} = \e&foo\*(C'\fR. You can have multiple \fB\-u\fR
options. The compiler tries to figure out which packages may possibly
have subs in which need compiling but the current version doesn't do
it very well. In particular, it is confused by nested packages (i.e.
of the form \f(CW\*(C`A::B\*(C'\fR) where package \f(CW\*(C`A\*(C'\fR does not contain any subs.
.ie n .IP "\fB\-U\fR\fIPackage\fR ""unuse"" skip Package" 4
.el .IP "\fB\-U\fR\fIPackage\fR ``unuse'' skip Package" 4
.IX Item "-UPackage unuse skip Package"
Ignore all subs from Package to be compiled.
.Sp
Certain packages might not be needed at run-time, even if the pessimistic
walker detects it.
.IP "\fB\-staticxs\fR" 4
.IX Item "-staticxs"
Dump a list of bootstrapped \s-1XS\s0 package names to \fIoutfile.lst\fR
needed for \f(CW\*(C`perlcc \-\-staticxs\*(C'\fR.
Add code to DynaLoader to add the .so/.dll path to \s-1PATH.\s0
.ie n .IP "\fB\-D\fR""[OPTIONS]""" 4
.el .IP "\fB\-D\fR\f(CW[OPTIONS]\fR" 4
.IX Item "-D[OPTIONS]"
Debug options, concatenated or separate flags like \f(CW\*(C`perl \-D\*(C'\fR.
Verbose debugging options are crucial, because the interactive
debugger Od adds a lot of ballast to the resulting code.
.IP "\fB\-Dfull\fR" 4
.IX Item "-Dfull"
Enable all full debugging, as with \f(CW\*(C`\-DoOcAHCMGSpWF\*(C'\fR.
All but \f(CW\*(C`\-Du\*(C'\fR.
.IP "\fB\-Do\fR" 4
.IX Item "-Do"
All Walkop'ed OPs
.IP "\fB\-DO\fR" 4
.IX Item "-DO"
\&\s-1OP\s0 Type,Flags,Private
.IP "\fB\-DS\fR" 4
.IX Item "-DS"
Scalar SVs, prints \fB\s-1SV/RE/RV\s0\fR information on saving.
.IP "\fB\-DP\fR" 4
.IX Item "-DP"
Extra \s-1PV\s0 information on saving. (static, len, hek, fake_off, ...)
.IP "\fB\-Dc\fR" 4
.IX Item "-Dc"
\&\fBCOPs\fR, prints COPs as processed (incl. file & line num)
.IP "\fB\-DA\fR" 4
.IX Item "-DA"
prints \fB\s-1AV\s0\fR information on saving.
.IP "\fB\-DH\fR" 4
.IX Item "-DH"
prints \fB\s-1HV\s0\fR information on saving.
.IP "\fB\-DC\fR" 4
.IX Item "-DC"
prints \fB\s-1CV\s0\fR information on saving.
.IP "\fB\-DG\fR" 4
.IX Item "-DG"
prints \fB\s-1GV\s0\fR information on saving.
.IP "\fB\-DM\fR" 4
.IX Item "-DM"
prints \fB\s-1MAGIC\s0\fR information on saving.
.IP "\fB\-DR\fR" 4
.IX Item "-DR"
prints \fB\s-1REGEXP\s0\fR information on saving.
.IP "\fB\-Dp\fR" 4
.IX Item "-Dp"
prints cached \fBpackage\fR information, if used or not.
.IP "\fB\-Ds\fR" 4
.IX Item "-Ds"
prints all compiled sub names, optionally with \*(L" not found\*(R".
.IP "\fB\-DF\fR" 4
.IX Item "-DF"
Add Flags info to the code.
.IP "\fB\-DW\fR" 4
.IX Item "-DW"
Together with \fB\-Dp\fR also prints every \fBwalked\fR package symbol.
.IP "\fB\-Du\fR" 4
.IX Item "-Du"
do not print \fB\-D\fR information when parsing for the unused subs.
.IP "\fB\-Dr\fR" 4
.IX Item "-Dr"
Writes debugging output to \s-1STDERR\s0 and to the program's generated C file.
Otherwise writes debugging info to \s-1STDERR\s0 only.
.IP "\fB\-f\fR\fI\s-1OPTIM\s0\fR" 4
.IX Item "-fOPTIM"
Force options/optimisations on or off one at a time. You can explicitly
disable an option using \fB\-fno\-option\fR. All options default to
\&\fBdisabled\fR.
.RS 4
.IP "\fB\-fcog\fR \fI(Ignored)\fR" 4
.IX Item "-fcog (Ignored)"
Future flag to enable Copy-on-grow, i.e Copy-on-write, when perl
will store the \s-1COWREFCNT\s0 in a seperate field and not in the string buffer.
.Sp
Some strings are declared and initialised statically independent
of \f(CW\*(C`\-fcog\*(C'\fR, see \f(CW\*(C`\-fconst\-strings\*(C'\fR instead.
.IP "\fB\-fav\-init\fR" 4
.IX Item "-fav-init"
Faster pre-initialization of AVs (arrays and pads).
Also used if \-fav\-init2 is used and \fIindependent_comalloc()\fR is not detected.
.Sp
Enabled with \f(CW\*(C`\-O1\*(C'\fR.
.IP "\fB\-fav\-init2\fR" 4
.IX Item "-fav-init2"
Even more faster pre-initialization of AVs with \fB\f(BIindependent_comalloc()\fB\fR if supported.
Excludes \f(CW\*(C`\-fav_init\*(C'\fR if so; uses \f(CW\*(C`\-fav_init\*(C'\fR if \f(CW\*(C`independent_comalloc()\*(C'\fR is not supported.
.Sp
\&\f(CW\*(C`independent_comalloc()\*(C'\fR is recommended from \fBptmalloc3\fR, but also included in
\&\f(CW\*(C`ptmalloc\*(C'\fR, \f(CW\*(C`dlmalloc\*(C'\fR and \f(CW\*(C`nedmalloc\*(C'\fR.
Download \f(CW\*(C`ptmalloc3\*(C'\fR here: <http://www.malloc.de/en/>
Note: \f(CW\*(C`independent_comalloc()\*(C'\fR is not included in \f(CW\*(C`google\-perftools\*(C'\fR \f(CW\*(C`tcmalloc\*(C'\fR.
.Sp
Enabled with \f(CW\*(C`\-O1\*(C'\fR.
.IP "\fB\-fppaddr\fR" 4
.IX Item "-fppaddr"
Optimize the initialization of \f(CW\*(C`op_ppaddr\*(C'\fR.
.Sp
Enabled with \f(CW\*(C`\-O1\*(C'\fR.
.IP "\fB\-fwarn\-sv\fR" 4
.IX Item "-fwarn-sv"
Use static initialization for cop_warnings. Automatically disabled for \s-1MSVC 5.\s0
.Sp
Disable with \f(CW\*(C`\-fno\-warn\-sv\*(C'\fR.
.IP "\fB\-fro\-inc\fR" 4
.IX Item "-fro-inc"
Set read-only \fB\f(CB@INC\fB\fR and \fB\f(CB%INC\fB\fR pathnames (\f(CW\*(C`\-fconst\-string\*(C'\fR, not the \s-1AV\s0)
to store them const and statically, not via malloc at run-time.
.Sp
This forbids run-time extends of \s-1INC\s0 path strings,
the run-time will crash then.
.Sp
It will also skip storing string values of internal regexp capture groups
\&\f(CW$1\fR \- \f(CW$9\fR, which were used internally by the compiler or some module. They
are considered volatile.
.Sp
Enabled with \f(CW\*(C`\-O2\*(C'\fR.
.IP "\fB\-fsave\-data\fR" 4
.IX Item "-fsave-data"
Save package::DATA filehandles ( only available with PerlIO ).
Does not work yet on Perl 5.6, 5.12 and non-threaded 5.10, and is
enabled automatically where it is known to work.
.Sp
Enabled with \f(CW\*(C`\-O2\*(C'\fR.
.IP "\fB\-fcow\fR" 4
.IX Item "-fcow"
Enforce static \s-1COW\s0 strings since 5.18 for most strings.
.Sp
Enabled with \f(CW\*(C`\-O2\*(C'\fR since 5.20.
.IP "\fB\-fconst\-strings\fR" 4
.IX Item "-fconst-strings"
Declares static readonly strings as const.
Note that readonly strings in eval'd string code will
cause a run-time failure.
.Sp
Enabled with \f(CW\*(C`\-O3\*(C'\fR.
.IP "\fB\-fno\-destruct\fR" 4
.IX Item "-fno-destruct"
Does no global \f(CW\*(C`perl_destruct()\*(C'\fR at the end of the process, leaving
the memory cleanup to operating system.
.Sp
This will cause problems if used embedded or as shared library/module,
but not in long-running processes.
.Sp
This helps with destruction problems of static data in the
default perl destructor, and enables \f(CW\*(C`\-fcog\*(C'\fR since 5.10.
.Sp
Enabled with \f(CW\*(C`\-O3\*(C'\fR.
.IP "\fB\-fno\-walkall\fR" 4
.IX Item "-fno-walkall"
\&\f(CW\*(C`\-fno\-walkall\*(C'\fR uses the simple old algorithm to detect which packages
needs to be stored.
\&\f(CW\*(C`\-fwalkall\*(C'\fR was introduced to catch previously uncompiled packages for
computed methods or undetected deeper run-time dependencies.
.IP "\fB\-fno\-save\-sig\-hash\fR" 4
.IX Item "-fno-save-sig-hash"
Disable compile-time modifications to the \f(CW%SIG\fR hash.
.IP "\fB\-fno\-fold\fR \fI(since 5.14)\fR" 4
.IX Item "-fno-fold (since 5.14)"
m//i since 5.13.10 requires the whole unicore/To/Fold table in memory,
which is about 1.6MB on 32\-bit. In \s-1CORE\s0 this is demand-loaded from \fIutf8.pm\fR.
.Sp
If you are sure not to use or require any case-insensitive
matching you can strip this table from memory with \f(CW\*(C`\-fno\-fold\*(C'\fR.
.Sp
Enabled with \f(CW\*(C`\-O3\*(C'\fR.
.IP "\fB\-fno\-warnings\fR \fI(since 5.14)\fR" 4
.IX Item "-fno-warnings (since 5.14)"
Run-time warnings since 5.13.5 require some \f(CW\*(C`warnings::register_categories\*(C'\fR
in memory, which is about 68kB on 32\-bit. In \s-1CORE\s0 this is demand-loaded
from \fIwarnings.pm\fR.
.Sp
You can strip this table from memory with \f(CW\*(C`\-fno\-warnings\*(C'\fR.
.Sp
Enabled with \f(CW\*(C`\-O3\*(C'\fR.
.IP "\fB\-fstash\fR" 4
.IX Item "-fstash"
Add dynamic creation of stashes, which are nested hashes of symbol tables,
names ending with \f(CW\*(C`::\*(C'\fR, starting at \f(CW%main::\fR.
.Sp
These are rarely needed, sometimes for checking of existance of packages,
which could be better done by checking \f(CW%INC\fR, and cost about 10% space and
startup-time.
.Sp
If an explicit stash member or the stash itself \f(CW%package::\fR is used in
the source code, the requested stash member(s) is/are automatically created.
.Sp
\&\f(CW\*(C`\-fno\-stash\*(C'\fR is the default.
.IP "\fB\-fno\-delete\-pkg\fR" 4
.IX Item "-fno-delete-pkg"
Do not delete compiler-internal and dependent packages which appear to be
nowhere used automatically. This might miss run-time called stringified methods.
See B::C::Config for \f(CW@deps\fR which packages are affected.
.Sp
\&\f(CW\*(C`\-fdelete\-pkg\*(C'\fR is the default.
.IP "\fB\-fuse\-script\-name\fR" 4
.IX Item "-fuse-script-name"
Use the script name instead of the program name as \f(CW$0\fR.
.Sp
Not enabled with any \f(CW\*(C`\-O\*(C'\fR option.
.IP "\fB\-fno\-dyn\-padlist\fR" 4
.IX Item "-fno-dyn-padlist"
Disable dynamic padlists since 5.17.6.  Dynamic padlists are needed to prevent
from \f(CW\*(C`cv_undef\*(C'\fR crashes on static padlists when cleaning up the stack on non-local
exits, like \f(CW\*(C`die\*(C'\fR or \f(CW\*(C`exit\*(C'\fR.
.Sp
All functions in \s-1END\s0 blocks and all Attribute::Handler function padlists
are automatically dynamic.
.Sp
Enabled with \f(CW\*(C`\-O4\*(C'\fR.
.IP "\fB\-fcop\fR" 4
.IX Item "-fcop"
\&\s-1DO NOT USE YET\s0!
.Sp
Omit \s-1COP\s0 info (nextstate without labels, unneeded \s-1NULL\s0 ops,
files, linenumbers) for ~10% faster execution and less space,
but warnings and errors will have no file and line infos.
.Sp
It will most likely not work yet. \fI(was \-fbypass\-nullops in earlier
compilers)\fR
.Sp
Enabled with \f(CW\*(C`\-O4\*(C'\fR.
.RE
.RS 4
.RE
.IP "\fB\-On\fR" 4
.IX Item "-On"
Optimisation level (n = 0, 1, 2, 3, 4). \fB\-O\fR means \fB\-O1\fR.
.RS 4
.IP "\fB\-O0\fR" 4
.IX Item "-O0"
Disable all optimizations.
.IP "\fB\-O1\fR" 4
.IX Item "-O1"
Enable \fB\-fcog\fR, \fB\-fav\-init2\fR/\fB\-fav\-init\fR, \fB\-fppaddr\fR and \fB\-fwarn\-sv\fR.
.Sp
Note that \f(CW\*(C`\-fcog\*(C'\fR without \f(CW\*(C`\-fno\-destruct\*(C'\fR will be disabled >= 5.10.
.IP "\fB\-O2\fR" 4
.IX Item "-O2"
Enable \fB\-O1\fR plus \fB\-fro\-inc\fR, \fB\-fsave\-data\fR and \fBfcow\fR.
.IP "\fB\-O3\fR" 4
.IX Item "-O3"
Enable \fB\-O2\fR plus \fB\-fno\-destruct\fR and \fB\-fconst\-strings\fR.
.IP "\fB\-O4\fR" 4
.IX Item "-O4"
Enable \fB\-O3\fR plus \fB\-fcop\fR and \fB\-fno\-dyn\-padlist\fR.
Very unsafe, rarely works, 10% faster, 10% smaller.
.RE
.RS 4
.RE
.IP "\fB\-l\fR\fIlimit\fR" 4
.IX Item "-llimit"
\&\*(L"line length limit\*(R".
.Sp
Some C compilers impose an arbitrary limit on the length of string
constants (e.g. 2048 characters for Microsoft Visual \*(C+).
\&\fB\-l2048\fR tells the C backend not to generate string literals
exceeding that limit.
.IP "\fB\-e \s-1ARG\s0\fR" 4
.IX Item "-e ARG"
Evaluate \s-1ARG\s0 at startup
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 2
\&    perl \-MO=C,\-ofoo.c foo.pl
\&    perl cc_harness \-o foo foo.c
.Ve
.PP
Note that \f(CW\*(C`cc_harness\*(C'\fR lives in the \f(CW\*(C`B\*(C'\fR subdirectory of your perl
library directory. The utility called \f(CW\*(C`perlcc\*(C'\fR may also be used to
help make use of this compiler.
.PP
.Vb 1
\&    perlcc foo.pl
\&
\&    perl \-MO=C,\-v,\-DcA,\-l2048 bar.pl > /dev/null
.Ve
.SH "CAVEAT"
.IX Header "CAVEAT"
With 5.6 it is not possible to use the _\|_DATA_\|_ filehandle, because
compatible access via PerlIO::scalar was added with 5.8.1
.PP
It is generally not possible to restore all of the compiled BEGIN-time state.
Esp. problematic are non-standard filehandles (i.e. fd>2), process ids,
environment specific knowledge, because only with the compiler \s-1BEGIN\s0 blocks
are not executed in the client environment.
.PP
The compiler produces some warnings, which might need source code changes
or changed compiler options.
.ie n .IP "Warning: Problem with require ""$name"" \- $INC{file.pm}" 4
.el .IP "Warning: Problem with require ``$name'' \- \f(CW$INC\fR{file.pm}" 4
.IX Item "Warning: Problem with require $name - $INC{file.pm}"
Dynamic load of \f(CW$name\fR did not add the expected \f(CW%INC\fR key.
.IP "Warning: C.xs \s-1PMOP\s0 missing for \s-1QR\s0" 4
.IX Item "Warning: C.xs PMOP missing for QR"
In an initial C.xs runloop all \s-1QR\s0 regex ops are stored, so that they
can matched later to PMOPs.
.IP "Warning: DynaLoader broken with 5.15.2\-5.15.3." 4
.IX Item "Warning: DynaLoader broken with 5.15.2-5.15.3."
[perl #100138] DynaLoader symbols were \s-1XS_INTERNAL.\s0 Strict linking
could not resolve it. Usually libperl was patched to overcome this
for these two versions.
Setting the environment variable NO_DL_WARN=1 omits this warning.
.ie n .IP "Warning: _\|_DATA_\|_ handle $fullname not stored. Need \-O2 or \-fsave\-data." 4
.el .IP "Warning: _\|_DATA_\|_ handle \f(CW$fullname\fR not stored. Need \-O2 or \-fsave\-data." 4
.IX Item "Warning: __DATA__ handle $fullname not stored. Need -O2 or -fsave-data."
Since processing the _\|_DATA_\|_ filehandle involves some overhead, requiring
PerlIO::scalar with all its dependencies, you must use \-O2 or \-fsave\-data.
.ie n .IP "Warning: Write BEGIN-block $fullname to FileHandle $iotype \e&$fd" 4
.el .IP "Warning: Write BEGIN-block \f(CW$fullname\fR to FileHandle \f(CW$iotype\fR \e&$fd" 4
.IX Item "Warning: Write BEGIN-block $fullname to FileHandle $iotype &$fd"
Critical problem. This must be fixed in the source.
.ie n .IP "Warning: Read BEGIN-block $fullname from FileHandle $iotype \e&$fd" 4
.el .IP "Warning: Read BEGIN-block \f(CW$fullname\fR from FileHandle \f(CW$iotype\fR \e&$fd" 4
.IX Item "Warning: Read BEGIN-block $fullname from FileHandle $iotype &$fd"
Critical problem. This must be fixed in the source.
.IP "Warning: \-o argument ignored with \-c" 4
.IX Item "Warning: -o argument ignored with -c"
\&\-c does only check, but not accumulate C output lines.
.ie n .IP "Warning: unresolved $section symbol s\e\exxx" 4
.el .IP "Warning: unresolved \f(CW$section\fR symbol s\e\exxx" 4
.IX Item "Warning: unresolved $section symbol sxxx"
This symbol was not resolved during compilation, and replaced by 0.
.Sp
With B::C this is most likely a critical internal compiler bug, esp. if in
an op section. See [issue #110].
.Sp
With B::CC it can be caused by valid optimizations, e.g. when op\->next
pointers were inlined or inlined \s-1GV\s0 or \s-1CONST\s0 ops were optimized away.
.SH "BUGS"
.IX Header "BUGS"
Current status: A few known bugs, but usable in production
.PP
5.6:
    reading from _\|_DATA_\|_ handles (15)
    \s-1AUTOLOAD\s0 xsubs (27)
.PP
>=5.10:
    Attribute::Handlers and run-time attributes
    @\- (#281)
    compile-time perlio layers
    run-time loading of DynaLoader packages which use AutoLoad
      i.e. BSD::Resource. (#308)
    format \s-1STDOUT\s0 or \s-1STDERR\s0 (#285)
.SH "AUTHOR"
.IX Header "AUTHOR"
Malcolm Beattie \f(CW\*(C`MICB at cpan.org\*(C'\fR \fI(1996\-1998, retired)\fR,
Nick Ing-Simmons <nik at tiuk.ti.com> I(1998\-1999),
Vishal Bhatia <vishal at deja.com> I(1999),
Gurusamy Sarathy <gsar at cpan.org> I(1998\-2001),
Mattia Barbon <mbarbon at dsi.unive.it> I(2002),
Reini Urban \f(CW\*(C`perl\-compiler@googlegroups.com\*(C'\fR I(2008\-)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlcompiler for a general overview,
B::CC for the optimising C compiler,
B::Bytecode + ByteLoader for the bytecode compiler,
Od for source level debugging in the B::Debugger,
illguts for the illustrated Perl guts,
perloptree for the Perl optree.
