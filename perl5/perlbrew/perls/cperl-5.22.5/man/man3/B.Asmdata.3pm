.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "B::Asmdata 3pm"
.TH B::Asmdata 3pm "2018-06-12" "perl v5.22.5" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
B::Asmdata \- Autogenerated data about Perl ops, used to generate bytecode
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use B::Asmdata qw(%insn_data @insn_name @optype @specialsv_name);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides information about Perl ops in order to generate bytecode via
a bunch of exported variables.  Its mostly used by B::Assembler and
B::Disassembler.
.ie n .IP "%insn_data" 4
.el .IP "\f(CW%insn_data\fR" 4
.IX Item "%insn_data"
.Vb 1
\&  my($bytecode_num, $put_sub, $get_meth) = @$insn_data{$op_name};
.Ve
.Sp
For a given \f(CW$op_name\fR (for example, 'cop_label', 'sv_flags', etc...)
you get an array ref containing the bytecode number of the op, a
reference to the subroutine used to '\s-1PUT\s0' the op argument to the bytecode stream,
and the name of the method used to '\s-1GET\s0' op argument from the bytecode stream.
.Sp
Most ops require one arg, in fact all ops without the PUT/GET_none methods,
and the \s-1GET\s0 and \s-1PUT\s0 methods are used to en\-/decode the arg to binary bytecode.
The names are constructed from the \s-1GET/PUT\s0 prefix and the argument type,
such as U8, U16, U32, svindex, opindex, pvindex, ...
.Sp
The \s-1PUT\s0 method is used in the B::Bytecode compiler within B::Assembler,
the \s-1GET\s0 method just for the B::Disassembler.
The \s-1GET\s0 method is not used by the binary ByteLoader module.
.Sp
A full \f(CW\*(C`insn\*(C'\fR table with version, opcode, name, lvalue, argtype and flags
is located as \s-1DATA\s0 in \fIbytecode.pl\fR.
.Sp
An empty \s-1PUT\s0 method, the number 0, denotes an unsupported bytecode for this perl.
It is there to support disassembling older perl bytecode. This was added with 1.02_02.
.ie n .IP "@insn_name" 4
.el .IP "\f(CW@insn_name\fR" 4
.IX Item "@insn_name"
.Vb 1
\&  my $op_name = $insn_name[$bytecode_num];
.Ve
.Sp
A simple mapping of the bytecode number to the name of the op.
Suitable for using with \f(CW%insn_data\fR like so:
.Sp
.Vb 1
\&  my $op_info = $insn_data{$insn_name[$bytecode_num]};
.Ve
.ie n .IP "@optype" 4
.el .IP "\f(CW@optype\fR" 4
.IX Item "@optype"
.Vb 1
\&  my $op_type = $optype[$op_type_num];
.Ve
.Sp
A simple mapping of the op type number to its type (like '\s-1COP\s0' or '\s-1BINOP\s0').
.Sp
Since Perl version 5.10 defined in B.
.ie n .IP "@specialsv_name" 4
.el .IP "\f(CW@specialsv_name\fR" 4
.IX Item "@specialsv_name"
.Vb 1
\&  my $sv_name = $specialsv_name[$sv_index];
.Ve
.Sp
Certain \s-1SV\s0 types are considered 'special'.  They're represented by
B::SPECIAL and are referred to by a number from the specialsv_list.
This array maps that number back to the name of the \s-1SV\s0 (like 'Nullsv'
or '&PL_sv_undef').
.Sp
Since Perl version 5.10 defined in B.
.SH "PORTABILITY"
.IX Header "PORTABILITY"
All bytecode values are already portable.
Cross-platform portability is implemented, cross-version not yet.
.PP
Cross-version portability will be very limited, cross-platform only
for the same threading model.
.SS "CROSS-PLATFORM \s-1PORTABILITY\s0"
.IX Subsection "CROSS-PLATFORM PORTABILITY"
For different endian-ness there are ByteLoader converters in effect.
Header entry: byteorder.
.PP
64int \- 64all \- 32int is portable. Header entry: ivsize
.PP
\&\s-1ITHREADS\s0 are unportable; header entry: archflag \- bitflag 1.
\&\s-1MULTIPLICITY\s0 is also unportable; header entry: archflag \- bitflag 2
.PP
\&\s-1TODO\s0 For cross-version portability we will try to translate older
bytecode ops to the current perl op via ByteLoader::Translate.
Asmdata already contains the old ops, all with the \s-1PUT\s0 method 0.
Header entry: perlversion
.SS "CROSS-VERSION \s-1PORTABILITY\s0 (\s-1TODO\s0 \- \s-1HARD\s0)"
.IX Subsection "CROSS-VERSION PORTABILITY (TODO - HARD)"
Bytecode ops:
We can only reliably load bytecode from previous versions and promise
that from 5.10.0 on future versions will only add new op numbers at
the end, but will never replace old opcodes with incompatible arguments.
Unsupported insn's are supported by disassemble, and if \f(CW\*(C`force\*(C'\fR in the
ByteLoader is set, it is tried to load/set them also, with probably fatal
consequences.
On the first unknown bytecode op from a future version \- added to the end
\&\- we will die.
.PP
ByteLoader::BcVersions contains logic to translate previous errors
from this bytecode policy. E.g. 5.8 violated the 5.6 bytecode order policy
and began to juggle it around (similar to parrot), in detail removed
various bytecodes, like ldspecsvx:7, xpv_cur, xpv_len, xiv64:26.
So in theory it would have been possible to load 5.6 into 5.8 bytecode
as the underlying perl pp_code ops didn't change that much, but it is risky.
.PP
We have unused tables of all bytecode ops for all version-specific changes
to the bytecode table. This only changed with
the ByteLoader version, ithreads and major Perl versions.
.PP
Also special replacements in the byteloader for all the unsupported
ops, like xiv64, cop_arybase.
.SH "AUTHOR"
.IX Header "AUTHOR"
Malcolm Beattie \f(CW\*(C`MICB at cpan.org\*(C'\fR \fI(retired)\fR,
Reini Urban added the version logic, support >= 5.10, portability.
