.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Mixin::Linewise::Readers 3"
.TH Mixin::Linewise::Readers 3 "2015-04-08" "perl v5.22.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mixin::Linewise::Readers \- get linewise readers for strings and filenames
.SH "VERSION"
.IX Header "VERSION"
version 0.108
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package Your::Pkg;
\&  use Mixin::Linewise::Readers \-readers;
\&
\&  sub read_handle {
\&    my ($self, $handle) = @_;
\&
\&    LINE: while (my $line = $handle\->getline) {
\&      next LINE if $line =~ /^#/;
\&
\&      print "non\-comment: $line";
\&    }
\&  }
.Ve
.PP
Then:
.PP
.Vb 1
\&  use Your::Pkg;
\&
\&  Your::Pkg\->read_file($filename);
\&
\&  Your::Pkg\->read_string($string);
\&
\&  Your::Pkg\->read_handle($fh);
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
\&\f(CW\*(C`read_file\*(C'\fR and \f(CW\*(C`read_string\*(C'\fR are exported by default.  Either can be
requested individually, or renamed.  They are generated by
Sub::Exporter, so consult its documentation for more
information.
.PP
Both can be generated with the option \*(L"method\*(R" which requests that a method
other than \*(L"read_handle\*(R" is called with the created IO::Handle.
.PP
If given a \*(L"binmode\*(R" option, any \f(CW\*(C`read_file\*(C'\fR type functions will use
that as an \s-1IO\s0 layer, otherwise, the default is \f(CW\*(C`utf8_strict\*(C'\fR.
.PP
.Vb 2
\&  use Mixin::Linewise::Readers \-readers => { binmode => "raw" };
\&  use Mixin::Linewise::Readers \-readers => { binmode => "encoding(iso\-8859\-1)" };
.Ve
.SS "read_file"
.IX Subsection "read_file"
.Vb 2
\&  Your::Pkg\->read_file($filename);
\&  Your::Pkg\->read_file(\e%options, $filename);
.Ve
.PP
If generated, the \f(CW\*(C`read_file\*(C'\fR export attempts to open the named file for
reading, and then calls \f(CW\*(C`read_handle\*(C'\fR on the opened handle.
.PP
An optional hash reference may be passed before \f(CW$filename\fR with options.
The only valid option currently is \f(CW\*(C`binmode\*(C'\fR, which overrides any
default set from \f(CW\*(C`use\*(C'\fR or the built-in \f(CW\*(C`utf8_strict\*(C'\fR.
.PP
Any arguments after \f(CW$filename\fR are passed along after to \f(CW\*(C`read_handle\*(C'\fR.
.SS "read_string"
.IX Subsection "read_string"
.Vb 2
\&  Your::Pkg\->read_string($string);
\&  Your::Pkg\->read_string(\e%option, $string);
.Ve
.PP
If generated, the \f(CW\*(C`read_string\*(C'\fR creates a handle on the given string, and
then calls \f(CW\*(C`read_handle\*(C'\fR on the opened handle.  Because handles on strings
must be octet-oriented, the string \fBmust contain octets\fR.  It will be opened
in the default binmode established by importing.  (See \*(L"\s-1EXPORTS\*(R"\s0, above.)
.PP
Any arguments after \f(CW$string\fR are passed along after to \f(CW\*(C`read_handle\*(C'\fR.
.PP
Like \f(CW\*(C`read_file\*(C'\fR, this method can take a leading hashref with one valid
argument: \f(CW\*(C`binmode\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2008 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
