.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Term::UI::History 3"
.TH Term::UI::History 3 "2015-05-25" "perl v5.22.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::UI::History \- history function
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Term::UI::History qw[history];
\&
\&    history("Some message");
\&
\&    ### retrieve the history in printable form
\&    $hist  = Term::UI::History\->history_as_string;
\&
\&    ### redirect output
\&    local $Term::UI::History::HISTORY_FH = \e*STDERR;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides the \f(CW\*(C`history\*(C'\fR function for \f(CW\*(C`Term::UI\*(C'\fR,
printing and saving all the \f(CW\*(C`UI\*(C'\fR interaction.
.PP
Refer to the \f(CW\*(C`Term::UI\*(C'\fR manpage for details on usage from
\&\f(CW\*(C`Term::UI\*(C'\fR.
.PP
This module subclasses \f(CW\*(C`Log::Message::Simple\*(C'\fR. Refer to its
manpage for additional functionality available via this package.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "history(""message string"" [,VERBOSE])"
.el .SS "history(``message string'' [,VERBOSE])"
.IX Subsection "history(message string [,VERBOSE])"
Records a message on the stack, and prints it to \f(CW\*(C`STDOUT\*(C'\fR
(or actually \f(CW$HISTORY_FH\fR, see the \f(CW\*(C`GLOBAL VARIABLES\*(C'\fR section
below), if the \f(CW\*(C`VERBOSE\*(C'\fR option is true.
.PP
The \f(CW\*(C`VERBOSE\*(C'\fR option defaults to true.
.SH "GLOBAL VARIABLES"
.IX Header "GLOBAL VARIABLES"
.ie n .IP "$HISTORY_FH" 4
.el .IP "\f(CW$HISTORY_FH\fR" 4
.IX Item "$HISTORY_FH"
This is the filehandle all the messages sent to \f(CW\*(C`history()\*(C'\fR are being
printed. This defaults to \f(CW*STDOUT\fR.
.SH "See Also"
.IX Header "See Also"
\&\f(CW\*(C`Log::Message::Simple\*(C'\fR, \f(CW\*(C`Term::UI\*(C'\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
This module by
Jos Boumans <kane@cpan.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This module is
copyright (c) 2005 Jos Boumans <kane@cpan.org>.
All rights reserved.
.PP
This library is free software;
you may redistribute and/or modify it under the same
terms as Perl itself.
