.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Log::Message::Config 3"
.TH Log::Message::Config 3 "2013-04-25" "perl v5.22.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Message::Config \- Configuration options for Log::Message
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # This module is implicitly used by Log::Message to create a config
\&    # which it uses to log messages.
\&    # For the options you can pass, see the C<Log::Message new()> method.
\&
\&    # Below is a sample of a config file you could use
\&
\&    # comments are denoted by a single \*(Aq#\*(Aq
\&    # use a shared stack, or have a private instance?
\&    # if none provided, set to \*(Aq0\*(Aq,
\&    private = 1
\&
\&    # do not be verbose
\&    verbose = 0
\&
\&    # default tag to set on new items
\&    # if none provided, set to \*(AqNONE\*(Aq
\&    tag = SOME TAG
\&
\&    # default level to handle items
\&    # if none provided, set to \*(Aqlog\*(Aq
\&    level = carp
\&
\&    # extra files to include
\&    # if none provided, no files are auto included
\&    include = mylib.pl
\&    include = ../my/other/lib.pl
\&
\&    # automatically delete items
\&    # when you retrieve them from the stack?
\&    # if none provided, set to \*(Aq0\*(Aq
\&    remove = 1
\&
\&    # retrieve errors in chronological order, or not?
\&    # if none provided, set to \*(Aq1\*(Aq
\&    chrono = 0
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Log::Message::Config provides a standardized config object for
Log::Message objects.
.PP
It can either read options as perl arguments, or as a config file.
See the Log::Message manpage for more information about what arguments
are valid, and see the Synopsis for an example config file you can use
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Log::Message, Log::Message::Item, Log::Message::Handlers
.SH "AUTHOR"
.IX Header "AUTHOR"
This module by
Jos Boumans <kane@cpan.org>.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Thanks to Ann Barcomb for her suggestions.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This module is
copyright (c) 2002 Jos Boumans <kane@cpan.org>.
All rights reserved.
.PP
This library is free software;
you may redistribute and/or modify it under the same
terms as Perl itself.
